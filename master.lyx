#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass amsbook
\begin_preamble
\usepackage{amsmath}
\DeclareMathOperator*{\argmax}{arg\,max}
\DeclareMathOperator*{\argmin}{arg\,min}
\usepackage{dsfont}
\newcommand{\mathbbOld}{\mathbb}
\renewcommand{\mathbb}{\mathds}
\usepackage{natbib}
\usepackage{algorithm,algpseudocode}
\end_preamble
\use_default_options true
\begin_removed_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_removed_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\branch hidden
\selected 0
\filename_suffix 0
\color #faf0e6
\end_branch
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Chapter
Neural networks
\end_layout

\begin_layout Standard
In this chapter, we will progressively introduce concepts and techniques
 that are used in artificial intelligence tasks.
 In particular, we will introduce neural networks, that have proven a powerful
 model and produced state of the art results in a variety of tasks.
\end_layout

\begin_layout Section
Artificial intelligence
\end_layout

\begin_layout Standard
Intelligence is a difficult concept to define.
 We will use the following definition: the ability to make sensible decisions
 in a given situation, possibly making use of a memory of past events that
 share similarities with the current situation.
 The most intelligent individual agent that we are aware of nowadays is
 certainly the human being, amongst other animals.
 Human beings are constantly making decisions given their perception of
 the world that is provided by their 5 senses, using knowledge that they
 have studied or experienced in their life.
 But there is no 
\shape italic
a priori
\shape default
 reason to think that intelligence could not be present in other systems,
 and in particular artificial intelligence is a scientific field that aims
 at implementing intelligence in non-living machines.
\end_layout

\begin_layout Standard
How our society of humans can benefit from artificial intelligence is still
 an open question, out of the scope of the present document.
 Regardless, given the recent popularity of artificial intelligence among
 public research laboratories and in the industry, and the recent successes
 at solving complex tasks, we can say without taking risks that artificial
 intelligence will continue to play a big role in shaping the future of
 our society.
\end_layout

\begin_layout Standard
From a more practical perspective, implementing an artificial intelligent
 machine requires designing a system that takes data that represent the
 current situation, data that represents the memory of the machine, and
 output a decision using this data.
\end_layout

\begin_layout Standard
To put things into context, we will now describe an example task.
 We want to design a program that takes a picture of an animal and a sound
 as input, and outputs whether it thinks the animal present in the picture
 makes the provided sound.
 In a computer, a picture is often encoded as a mathematical tensor of scalar
 values or pixels, the sound as a timeseries of samples of the sound wave,
 and the final decision can be a single scalar values, which will be close
 to 0 is the animal is very unlikely to make the noise, or to 1 if the animal
 is very likely to make the noise.
 The complex machinery inbetween is the intelligent part.
\end_layout

\begin_layout Standard
Manually designing a program for such a task is an overwhelming task.
 Even provided that the input image is quite a small image of 
\begin_inset Formula $32\times32$
\end_inset

 RGB pixels and the sound lasts 
\begin_inset Formula $1s$
\end_inset

 recorded at a sample rate of 20kHz we have a total of 
\begin_inset Formula $32\times32\times3+20\,000=23\,072$
\end_inset

 scalars.
 If we restrict each of these numbers to have 
\begin_inset Formula $256$
\end_inset

 possible values, it leaves us with 
\begin_inset Formula $256^{23\,072}\approx10^{55\,000}$
\end_inset

 possible combinations.
 Even if we only keep the combinations that are plausible, there is too
 many to create a naive program.
 Even with carefully engineered feature extractors based on image and sound
 processing techniques, the remaining work of is still challenging.
\end_layout

\begin_layout Standard
Instead, the most successful attempts at solving such tasks use a procedure
 called 
\series bold
machine learning
\series default
: instead of manually defining our program, we define a generic model, and
 we use a dataset of annotated examples of picture, sound, and the corresponding
 answer, and we leave to the computer the task of extracting information
 from the dataset to tune the model so as to obtain the desired program.
\end_layout

\begin_layout Section
Machine learning
\end_layout

\begin_layout Subsection
Parametric functions and learning
\end_layout

\begin_layout Standard
Generally speaking, machine learning consists in finding an unknown function
 
\begin_inset Formula $f$
\end_inset

 from a family of functions 
\begin_inset Formula $\mathcal{F}$
\end_inset

, that will solve a certain task.
 We typically restrict our search to a smaller family of functions, which
 consists in parametrized functions 
\begin_inset Formula $\mathcal{F}_{\theta}$
\end_inset

.
 We will denote by 
\begin_inset Formula $f_{\theta}$
\end_inset

 such a function, parametrized by a vector of parameters 
\begin_inset Formula $\theta$
\end_inset

.
 Adapting the value of the parameters will change the output of the function
 
\begin_inset Formula $f_{\theta}$
\end_inset

.
 The challenges of machine learning are to find a correct parametrization
 so that our desired function can be approached by a member of 
\begin_inset Formula $\mathcal{F}_{\theta}$
\end_inset

, and to learn the parameters of this target function.
\end_layout

\begin_layout Standard
To this end, we need a measure of the performance of a given function at
 solving our task.
 We chose a loss function 
\begin_inset Formula $l$
\end_inset

, adapted to this task.
 The better our function, the lower the value of 
\begin_inset Formula $l$
\end_inset

.
 The remaining ingredient is a data generating distribution 
\begin_inset Formula $p$
\end_inset

 from which we sample datapoints 
\begin_inset Formula $x\sim p$
\end_inset

 that are our examples.
 A measure of the performance of a function 
\begin_inset Formula $f_{\theta}$
\end_inset

 for the given task is given by the risk:
\begin_inset CommandInset label
LatexCommand label
name "cost-function"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
\mathcal{R}\left(\theta,p\right) & = & \mathbb{E}_{x\sim p}\left[l\left(f_{\theta}\left(x\right)\right)\right]
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\mathcal{R}$
\end_inset

 is a scalar value.
 If this value is high, then 
\begin_inset Formula $f_{\theta}$
\end_inset

 is bad at solving the desired task.
 In the opposite, the best function can be found by adjusting 
\begin_inset Formula $\theta$
\end_inset

 so as to reach the smallest value of 
\begin_inset Formula $\mathcal{R}$
\end_inset

.
 The best value for the parameter vector 
\begin_inset Formula $\theta^{*}$
\end_inset

 is given by:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
\theta^{*} & = & \text{argmin}_{\theta}\mathcal{R}\left(\theta,p\right)
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
Finding this value 
\begin_inset Formula $\theta^{*}$
\end_inset

 is the task of learning from the data.
\end_layout

\begin_layout Standard
We now present two common tasks and their corresponding loss functions.
 We will restrict to the less general setting of 
\shape italic
supervised
\shape default
 learning, where each data point is composed of an input 
\begin_inset Formula $x$
\end_inset

 and a target 
\begin_inset Formula $y$
\end_inset

.
\end_layout

\begin_layout Standard
In
\series bold
 regression
\series default
, the input vector 
\begin_inset Formula $x$
\end_inset

 is mapped to a numerical value 
\begin_inset Formula $y$
\end_inset

.
 To assess the performance of 
\begin_inset Formula $f_{\theta}$
\end_inset

, we use the loss function 
\begin_inset Formula $l\left(f_{\theta}\left(x\right),y\right)=\left\Vert f_{\theta}\left(x\right)-y\right\Vert _{2}^{2}$
\end_inset

, called the quadratic error.
 It reaches its minimum 
\begin_inset Formula $0$
\end_inset

 when 
\begin_inset Formula $f_{\theta}\left(x\right)=y$
\end_inset

.
 For example we can design a model that predicts the price of a real estate,
 given some features such as the size of the house, the number of bedrooms
 and whether it possesses a fireplace.
\end_layout

\begin_layout Standard
In supervised 
\series bold
classification
\series default
, we classify each data point 
\begin_inset Formula $x$
\end_inset

 into a category 
\begin_inset Formula $y$
\end_inset

.
 A natural loss that comes up is the misclassification indicator function
 
\begin_inset Formula $\mathbf{1}\left(f_{\theta}\left(x\right),y\right)=\left\{ 0\text{ if }f_{\theta}\left(x\right)=y\text{ or }1\text{ otherwise}\right\} $
\end_inset

.
 It counts the examples that are misclassified.
 This function present the disadvantage of not being differentiable (it
 is not even continuous), and we will see in future sections that differentiabil
ity is a valuable property for machine learning.
 Instead, we usually make our function 
\begin_inset Formula $f_{\theta}$
\end_inset

 output a vector of the number of categories, which represents computed
 probabilites of being a member of each category (a scalar between 
\begin_inset Formula $0$
\end_inset

 and 
\begin_inset Formula $1$
\end_inset

).
 We use the loss called 
\shape italic
cross entropy 
\begin_inset Formula $l\left(f_{\theta}\left(x\right),y\right)=-\log\left(\left(f_{\theta}\left(x\right)\right)_{y}\right)$
\end_inset


\shape default
.
 This will push the probability of the correct category toward 
\begin_inset Formula $1$
\end_inset

.
 An example classification task is proposed by the ImageNet project 
\begin_inset CommandInset citation
LatexCommand cite
key "deng2009imagenet"

\end_inset

 where the task is to classify images to detect what they represent such
 as an animal, or a car and so on.
\end_layout

\begin_layout Subsection
Empirical risk and bias-variance tradeoff
\end_layout

\begin_layout Standard
In practice, often, we do not have access to a data generating function
 
\begin_inset Formula $p$
\end_inset

, but instead we have a limited number of samples from it.
 This dataset of examples gives us an estimate of the true risk, by replacing
 the expectation with a finite sum, called the empirical risk 
\begin_inset Formula $R$
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{align*}
\begin{array}{ccccc}
\mathcal{R}\left(\theta,p\right) & \approx & R\left(\theta,\mathcal{D}\right) & = & \frac{1}{n}\sum_{x\in\mathcal{D}}l\left(f_{\theta}\left(x\right)\right)\end{array}
\end{align*}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $n$
\end_inset

 is the total number of examples in 
\begin_inset Formula $\mathcal{D}$
\end_inset

.
\end_layout

\begin_layout Standard
For random values of the parameters 
\begin_inset Formula $\theta$
\end_inset

, the empirical risk and the true risk will have similar values.
 But this is not the case when the parameters have been tuned so that the
 empirical risk is minimum.
 In the extreme case, consider a model that has memorized all examples of
 the training set by heart.
 In order to make a prediction for a new example, this model will seek the
 closest example in 
\begin_inset Formula $\mathcal{D}$
\end_inset

, in term of the euclidean distance, and output the exact same answer than
 this closest example.
 This model is called a 1-nearest neighbour regressor or classifier regarding
 the considered task.
 In this case the empirical risk is 
\begin_inset Formula $0$
\end_inset

, but we have no guarantee that the model generalizes on new examples.
\end_layout

\begin_layout Standard
A model with too much expressivity, or 
\shape italic
variance
\shape default
, will be able to learn all examples in the training set by heart without
 having the ability to generalize on new examples, which is called 
\shape italic
overfitting
\shape default
.
 A model with not enough expressivity will not be able to perform well even
 on the training set, which is called 
\shape italic
underfitting
\shape default
.
 In the meantime it will have a similar performance on the true data generating
 distribution.
 We say that there is a 
\shape italic
bias
\shape default
 toward a family of model.
 The bias-variance tradeoff consists in selecting a model that has sufficient
 expressivity to have a good performance on the train set, while not having
 too much expressivity so that it will not overfit, and still have good
 performance on the true data generating distribution.
\end_layout

\begin_layout Subsection
Regularization
\end_layout

\begin_layout Standard
A way of combatting overfitting is to use regularization.
 It is a way of constraining the parameters of a function using priors.
 For example L2 regularization penalizes the squared norm of the parameter
 vector.
 It constrains all values to stay small.
\end_layout

\begin_layout Standard
Data augmentation is another mean of combatting overfitting.
 We can use the knowledge that we have of our dataset to create new examples.
 For example for a classification task of images, we know from our experience
 of the world that rotating or translating an image will not change its
 content.
 We can thus artificially augment our training set by including rotated
 and translated versions of the same images.
\end_layout

\begin_layout Section
Neural networks
\end_layout

\begin_layout Standard
Neural networks are a family of parametrized models.
 They have empirically proven very powerful at solving complex tasks.
 Along with the availability of easy to use frameworks to build neural networks
 and learn from data, has developed new interests from industry to integrate
 artificial intelligence inspired techniques in more and more products.
 The first commercial successes date back to the 90s when AT&T developed
 an automated system to read handwritten digits on bank checks, using convolutio
nal neural networks 
\begin_inset CommandInset citation
LatexCommand cite
key "lecun1998gradient"

\end_inset

.
 Recent successes include advances in machine translation, image and voice
 recognition, close-to-realistic image generation.
 They have applications in online services integrated in smartphones, but
 also enable the invention of new automated systems that will benefit more
 traditional industries, (energy, agriculture, arts, ..)
\end_layout

\begin_layout Section
Common types of neural networks
\end_layout

\begin_layout Subsection
Multilayer perceptron
\end_layout

\begin_layout Standard
We now define the simplest neural network structure called the perceptron
 
\begin_inset CommandInset citation
LatexCommand cite
key "rosenblatt1961principles"

\end_inset

.
 From an input data vector 
\begin_inset Formula $x$
\end_inset

, it creates a prediction 
\begin_inset Formula $y$
\end_inset

 using the relation 
\begin_inset Formula $y\left(x\right)=f\left(\left\langle w,x\right\rangle +b\right)$
\end_inset

.
 
\begin_inset Formula $w$
\end_inset

 is called the weight vector, and 
\begin_inset Formula $b$
\end_inset

 is the bias.
 
\begin_inset Formula $f$
\end_inset

 is a function, and is sometimes called the nonlinearity or activation function
 as it allows the function 
\begin_inset Formula $y$
\end_inset

 to be different than just a linear function of its input 
\begin_inset Formula $x$
\end_inset

.
 From a trained perceptron, we take a decision for an example 
\begin_inset Formula $x$
\end_inset

 by comparing the value of the corresponding 
\begin_inset Formula $y$
\end_inset

 using a threshold value.
 Perceptrons were implemented before the invention of modern computers,
 as complex electronic circuits.
 The weights were encoded in hardware potentiometers and trained using an
 error-propagating process.
 Remarkably, these complex pieces of machinery were capable of obtaining
 good results for the task of recognizing simple shape images.
\end_layout

\begin_layout Standard
These perceptrons were designed to approximately replicate the computations
 made by a biological neuron.
 Each neuron gets input data from several other neurons, consisting in voltage
 spikes.
 The rate at which these spikes occur can be intepreted as whether a neuron
 is excited or not.
 Each neuron has different sensibilities regarding how it will react to
 an increase in spike rate from other neurons, this sensibility being mimicked
 by the weights in artificial neural networks.
\end_layout

\begin_layout Standard
This single perceptron is extended in a more complex model called the multilayer
 perceptron.
 It consists in alternatively stacking layers of linear transformation 
\begin_inset Formula $a=Wx+b$
\end_inset

 and nonlinearities 
\begin_inset Formula $y=f\left(a\right)$
\end_inset

, using a vectorized generalization of the perceptron: 
\begin_inset Formula $y\left(x\right)=f\left(Wx+b\right)$
\end_inset

.
 
\begin_inset Formula $W$
\end_inset

 is now a weight matrix, and 
\begin_inset Formula $b$
\end_inset

 a bias vector.
 
\begin_inset Formula $f$
\end_inset

 is an elementwise function.
 We stack these transformations to get more complex functions.
 An example for 2 layers gives a function 
\begin_inset Formula $y\left(x\right)=f_{2}\left(W_{2}f_{1}\left(W_{1}x+b_{1}\right)+b_{2}\right)$
\end_inset

.
 The intermediate values obtained at each layer 
\begin_inset Formula $f_{1}\left(W_{1}x+b_{1}\right)$
\end_inset

 are called the hidden representations as they are new representations of
 the same input data, but encoded in a different way.
 A trained neural network will create representations that are better suited
 for its task.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename figures/mlp.pdf
	width 100text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
A multilayer perceptron consists in alternatively stacking layers of a linear
 transformation and a nonlinearity
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Convolutional networks
\end_layout

\begin_layout Standard
Convolutional networks 
\begin_inset CommandInset citation
LatexCommand cite
key "lecun1989backpropagation"

\end_inset

 are well-suited for tasks involving sequential (timeseries) or spatial
 data (images).
 Instead of multiplying a weight matrix with the whole input vector, we
 split this input into smaller chunks of fixed sized corresponding to small
 vectors (2d case) or small matrices (3d case).
 The same weight matrix is applied to each of this smaller vectors so as
 to get a result at each position.
 In fact it amounts to a standard MLP with the weight matrix sharing weight
 values between corresponding positions.
\end_layout

\begin_layout Subsection
Autoencoders
\begin_inset CommandInset label
LatexCommand label
name "subsec:Autoencoders"

\end_inset


\end_layout

\begin_layout Standard
Autoencoders 
\begin_inset CommandInset citation
LatexCommand cite
key "hinton2006reducing,vincent2008extracting"

\end_inset

 are neural networks that are composed of an encoder part a decoder.
 The encoder takes the input and encodes encodes it to a new representation
 (often with less dimension than the input).
 The decoder takes the encoded input with the task of reconstructing the
 output.
 The encoded representation is often a layer with less neurons than the
 size of the input.
 The autoencoder is trained end-to-end, without manually taking care of
 the encoded representation.
 This representation is automatically created by learning from the data.
 It is a special case for regression.
\end_layout

\begin_layout Section
More elaborated cost functions
\end_layout

\begin_layout Standard
We can often associate a task and its corresponding loss function: regression
 with the quadratic error loss, and classification with the cross entropy
 loss 
\begin_inset CommandInset ref
LatexCommand ref
reference "cost-function"

\end_inset

.
 Some more recent advances in neural networks make use of more complex cost
 functions.
\end_layout

\begin_layout Standard

\series bold
Neural art 
\series default

\begin_inset CommandInset citation
LatexCommand cite
key "gatys2015neural"

\end_inset

 and its feed-forward extension 
\begin_inset CommandInset citation
LatexCommand cite
key "ulyanov2016texture"

\end_inset

 tackle the task of generating artwork images from a real world picture,
 that mimick the style of a given painting.
 To this end, they create a cost function that measures how a generated
 image resembles both the picture and the painting:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
\mathcal{L}_{\text{total}}\left(p,a,x\right) & = & \alpha\mathcal{L}_{\text{content}}\left(p,x\right)+\beta\mathcal{L}_{\text{style}}\left(a,x\right)
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $p$
\end_inset

 is the picture, 
\begin_inset Formula $a$
\end_inset

 is the artwork that we want to extract the style, and 
\begin_inset Formula $x$
\end_inset

 is any image.
 
\begin_inset Formula $\mathcal{L}_{\text{content}}$
\end_inset

 is a loss function that measures how close 
\begin_inset Formula $x$
\end_inset

 is from 
\begin_inset Formula $p$
\end_inset

 in terms of contents, and 
\begin_inset Formula $\mathcal{L}_{\text{style}}$
\end_inset

 is a loss function that measures a distance from 
\begin_inset Formula $a$
\end_inset

 to 
\begin_inset Formula $x$
\end_inset

 in terms of artistic style.
 By minimizing 
\begin_inset Formula $\mathcal{L}_{\text{total}}\left(p,a,x\right)$
\end_inset

 with respect to 
\begin_inset Formula $x$
\end_inset

 for given 
\begin_inset Formula $p$
\end_inset

 and 
\begin_inset Formula $a$
\end_inset

, we obtain the desired image in 
\begin_inset Formula $x$
\end_inset

.
 
\begin_inset Formula $\alpha$
\end_inset

 and 
\begin_inset Formula $\beta$
\end_inset

 are scalar values that control the influence of each part of the loss.
 In the original paper 
\begin_inset CommandInset citation
LatexCommand cite
key "gatys2015neural"

\end_inset

 we start from a randomly initialized 
\begin_inset Formula $x$
\end_inset

 and we perform gradient descent on each pixel of 
\begin_inset Formula $x$
\end_inset

.
 In 
\begin_inset CommandInset citation
LatexCommand cite
key "ulyanov2016texture"

\end_inset

 we use a convolutional neural network to generate 
\begin_inset Formula $x$
\end_inset

, which takes the picture as input, and outputs the desired stylized image.
 This network is trained using 
\begin_inset Formula $\mathcal{L}_{\text{total}}$
\end_inset

.
 It has the main advantage of being very fast as generating new images once
 it has be trained on a specific artwork.
\end_layout

\begin_layout Standard
Another family of cost functions that becomes more and more popular is that
 of the discriminators in 
\series bold
Generative Adversarial Networks 
\series default

\begin_inset CommandInset citation
LatexCommand cite
key "goodfellow2014generative"

\end_inset

, that can be thought of as learned cost functions.
 In this setup, 2 networks are trained one against each other : the generator
 part takes random noise and generate a sample that tries to fool the discrimina
tor.
 The discriminator also isalso a trained network that tries to classify
 whether its input is from a given data distribution, or if it was generated
 by the generator.
 Training these networks is very unstable, and is the object of many research
 at the time of this writing.
 But provided that we successfully trained both parts, we get a generator
 that is able to generate new samples of complex data, such as realistic
 images.
\end_layout

\begin_layout Chapter
Optimization of neural networks
\end_layout

\begin_layout Section
Gradient descent and backpropagation
\begin_inset CommandInset label
LatexCommand label
name "sec:Gradient-descent-and"

\end_inset


\end_layout

\begin_layout Subsection
Learning using gradient descent
\end_layout

\begin_layout Standard
Once we have chosen a model, and supposing that this model capable of solving
 a given task, the main challenge is now to learn the parameters of the
 model from the data.
 Some simple models have closed form solutions, this is for example the
 case for a linear model and a regression task.
 For more complex models such as neural networks, we can not derive a simple
 formula for getting the values of all parameters given a dataset.
 In this case, we start from an initialized network and iterate updates
 for our parameters until we get the expected results.
 To this end, we must find an efficient way of getting an update 
\begin_inset Formula $\Delta\theta$
\end_inset

 of our parameters 
\begin_inset Formula $\theta$
\end_inset

.
 Considering that we aim at finding the minimum of the empirical risk, such
 an update is given by the steepest direction of descent of the empirical
 risk, given by minus the gradient of the empirical risk, with respect to
 the parameters, denoted by 
\begin_inset Formula $\nabla_{\theta}R$
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
\nabla_{\theta}R & = & \frac{1}{n}\sum_{i}\nabla_{\theta}l\left(f_{\theta}\left(x_{i}\right),y_{i}\right)
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
Once we have a direction, we must choose how far to move in this direction.
 Several line search algorithms have been developed, but they require evaluating
 our objective several times, which can be costly for deep networks or big
 datasets.
 We will stick to a simple fixed learning rate, so that each iteration becomes:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
\theta & \leftarrow & \theta-\lambda\nabla_{\theta}R
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
Of course the scalar parameters 
\begin_inset Formula $\lambda$
\end_inset

 plays a very important role.
 If we choose a value that is too small then it will take several steps
 to reach the same point, so it will take longer.
 If the value is too big then we can go too far, to a point in the space
 of parameters where the gradient has changed so the direction that we are
 following is no longer a descent direction.
 For a practical example think of a valley.
 We start from a side of the valley and follow the steepest descent direction.
 If we go too far we will pass the bottom of the valley and start going
 up again.
\end_layout

\begin_layout Subsection
Computing the gradients using backpropagation
\end_layout

\begin_layout Standard
It might be difficult to get an exact expression for the gradient of a complex
 function, such as a neural network.
 What enabled the success of neural networks was a smart use of the chain
 rule for splitting the computation of the gradient, into a sequence of
 linear algebra operations, that is described in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fprop-bprop"

\end_inset

.
 For example we can decompose the gradient going through a layer 
\begin_inset Formula $h_{l+1}=f_{l}\left(W_{l}h_{l}+b_{l}\right)$
\end_inset

 using the expression:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
\nabla_{h_{l}}l & = & \left(\mathbf{J}_{a_{l}}^{h_{l}}\right)^{T}\nabla_{a_{l}}l\\
 & = & \left(\mathbf{J}_{a_{l}}^{h_{l}}\right)^{T}\left(\mathbf{J}_{h_{l+1}}^{a_{l}}\right)^{T}\nabla_{h_{l+1}}l
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
We denote by 
\begin_inset Formula $\mathbf{J}_{f}^{x}$
\end_inset

 the jacobian of the vector function 
\begin_inset Formula $f$
\end_inset

 with respect to 
\begin_inset Formula $x$
\end_inset

.
 It is the matrix composed of the partial derivatives 
\begin_inset Formula $\left(\mathbf{J}_{f}^{x}\right)_{ij}=\frac{\partial f_{i}}{\partial x_{j}}$
\end_inset

, so it has dimension 
\begin_inset Formula $n_{f}\times n_{x}$
\end_inset

.
 In the particular case of neural networks we have simple expressions for
 the jacobians of the backpropagated signal (red arrows in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fprop-bprop"

\end_inset

):
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
\mathbf{J}_{a_{l}}^{h_{l}} & = & W_{l}\\
\mathbf{J}_{h_{l+1}}^{a_{l}} & = & \text{diag}\left(f_{l}'\left(a_{l}\right)\right)
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
where 
\begin_inset Formula $\text{diag}$
\end_inset

 is the operation that takes a vector and transforms it to a diagonal matrix
 with the values of the vector as diagonal terms.
 These jacobians can be thought of the gradient flow between layers.
\end_layout

\begin_layout Standard
We also have expressions for the jacobians of the activations with respect
 to the parameters (green arrows in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fprop-bprop"

\end_inset

):
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
\mathbf{J}_{a_{l}}^{W_{l}} & = & \nabla_{a_{l}}l\left(h_{l}\right)^{T}\\
\mathbf{J}_{a_{l}}^{b_{l}} & = & \nabla_{a_{l}}l
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename figures/backprop.pdf
	width 100text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Forward (in black) and backward (in red) propagation of the intermediate
 results of the process of computing the output of the network and the gradient
 corresponding to this output and the desired "true" output.
 The green arrows represent the computation of the gradients with respect
 to the parameters, given the gradients with respect to the pre-activations.
\begin_inset CommandInset label
LatexCommand label
name "fprop-bprop"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Automatic differentiation tools
\end_layout

\begin_layout Standard
A key component in training neural networks is the library that we use to
 implement our models.
 The difficulty of implementing backpropagation in all kinds of neural networks
 inspired models, is solved using an automatic differentiation tool, such
 as Theano 
\begin_inset CommandInset citation
LatexCommand cite
key "bastien2012theano"

\end_inset

.
 Using such a tool we can define a model and a scalar cost function, then
 call a method 
\family typewriter
grad
\family default
 that takes care of the computation required to get the gradients with respect
 to the parameters.
\end_layout

\begin_layout Section
Stochastic gradient descent
\begin_inset CommandInset label
LatexCommand label
name "sec:Stochastic-gradient-descent"

\end_inset


\end_layout

\begin_layout Standard
While backpropagation is an efficient way of computing the exact gradient
 of the empirical risk with respect to the parameters, in practice we are
 not required to use its exact value, but rather we can use an estimate
 of the gradient, as long as this estimate will make our objective decrease.
 It is worth recalling at this point that even the exact gradient of the
 empirical risk is different of the real gradient we would like to follow,
 which is the gradient of the true risk.
\end_layout

\begin_layout Standard
A good estimate is obtained by computing the gradient using a smaller subset
 of our dataset, called a mini-batch.
 Replacing the gradient descent update with this estimate is called 
\series bold
stochastic gradient descent
\series default
 (SGD) 
\begin_inset CommandInset citation
LatexCommand citet
key "bottou2010large"

\end_inset

.
 The main benefit of using SGD instead of full gradient descent is that
 we can reduce the memory required to compute the gradient.
 The memory required to backpropagate the intermediate gradients (red arrows
 in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fprop-bprop"

\end_inset

) is proportional to the size of the minibatch.
 As datasets become bigger and bigger, while GPUs used for accelerating
 the computations have limited memory, adjusting the batch size is a good
 way of making an experiment fit on a selected computer.
\end_layout

\begin_layout Section
Hyperparameters
\end_layout

\begin_layout Standard
In the preceding sections we have introduced the learning rate 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Gradient-descent-and"

\end_inset

 and the minibatch size 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Stochastic-gradient-descent"

\end_inset

.
 These values are called hyperparameters, which is another kind of parametrizati
on of our learning procedure.
 Hyperparameters also include the structure of our model, such as the number
 of hidden layers and hidden units, the number of training iterations, the
 coefficients of the regularization terms.
 We do not find the optimal value for the hyperparameters using gradient
 descent, but instead we tune it by running several time the same experiment
 with different hyperparameter values, and control 
\end_layout

\begin_layout Standard
A difficulty in comparing optimization algorithms resides in the fact that
 there performances can change drastically for different values of hyperparamete
rs.
 Optimization papers sometimes mention heuristics that they experimentally
 found provide with a sensible value for some hyperparameters.
 But to overcome this difficulty and provide 
\begin_inset Quotes eld
\end_inset

fair
\begin_inset Quotes erd
\end_inset

 benchmarks, we usually tune the values of the hyperparameters by trying
 several sets of values.
 Hyperparameters tuning is a research field on its own, so we will just
 introduce 3 methods and motivate our use of a new technique that we call
 biased random search.
\end_layout

\begin_layout Standard
The most simple hyperparamater tuning procedure, called 
\series bold
grid search
\series default
, consists in selecting values at fixed length intervals, or using a logarithmic
 scale.
 A simple example would be a training procedure involving only one hyperparamete
r: the learning rate.
 We can launch several experiments for all values in 
\begin_inset Formula $\left\{ 10^{-3},10^{-2},10^{-1},1\right\} $
\end_inset

 for a fixed number of updates and select the value for which we obtained
 the best value for our target criteria such as the validation loss.
 When generalizing to several hyperparameters, we have to select all combination
s of values, which make our search space grow exponentially, and similarly
 for the number of experiments we will have to run.
\end_layout

\begin_layout Standard
A first extension to grid search replaces the fixed length intervals by
 random samples in our search space.
 It is called 
\series bold
random search
\series default
.
 Its main advantage over grid search shows up when any hyperparameters has
 no important effect on the learning algorithm 
\begin_inset CommandInset citation
LatexCommand cite
key "bergstra2012random"

\end_inset

.
 It will explore more different values for the other hyperparameters.
\end_layout

\begin_layout Standard
In the rest of this work, we will use an extension of random search that
 we call 
\series bold
biased random search
\series default

\begin_inset CommandInset label
LatexCommand label
name "biased-random-search"

\end_inset

.
 During the hyperparameter tuning procedure, we create a model of our cost
 landscape in the space of hyperparameters.
 As the number of experiments grows, the cost landscape is refined.
 We use this estimated cost landscape to bias our random search, so that
 regions of the hyperparameter space that are expected to provide a better
 result will have higher probability of being explored.
 In practice, we use a simple 1-nearest neighbor regressor 
\begin_inset CommandInset citation
LatexCommand cite
key "altman1992introduction"

\end_inset

 to model the cost landscape.
 Using the estimated value of the criteria 
\begin_inset Formula $c_{estimate}$
\end_inset

, we decide to keep the sampled value with probability 
\begin_inset Formula $p$
\end_inset

, or otherwise we reject the value and sample a new one, and so on until
 we get a value that is not rejected, which will be our next experiment.
 We can choose the value of 
\begin_inset Formula $p$
\end_inset

 using different heuristics, in practice we use 
\begin_inset Formula $p=\frac{c_{max}-c_{estimate}}{c_{max}-c_{min}}$
\end_inset

 (in this notation, the criteria needs to be minimized).
 This value for 
\begin_inset Formula $p$
\end_inset

 will almost surely reject values that are close to the worst experiments,
 and almost surely accept values that are close to the best experiments.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{algorithmic}[1]
\end_layout

\begin_layout Plain Layout


\backslash
Require{$
\backslash
mathcal{M}$ used to model the cost landscape in the space of HP}
\end_layout

\begin_layout Plain Layout


\backslash
Require{$
\backslash
mathcal{D}$ the domain of HP that we will explore}
\end_layout

\begin_layout Plain Layout


\backslash
State{$
\backslash
mathcal{H} 
\backslash
leftarrow 
\backslash
left[ 
\backslash
, 
\backslash
right]$}
\backslash
Comment{History of explored HP values and corresponding result}
\end_layout

\begin_layout Plain Layout


\backslash
While{not converged}
\end_layout

\begin_layout Plain Layout


\backslash
State{$
\backslash
text{rejected}
\backslash
leftarrow
\backslash
text{true}$}
\end_layout

\begin_layout Plain Layout


\backslash
While{$
\backslash
text{rejected}$}
\end_layout

\begin_layout Plain Layout


\backslash
State{$a
\backslash
sim U
\backslash
left(
\backslash
mathcal{D}
\backslash
right)$}
\backslash
Comment{Sample values for HP}
\end_layout

\begin_layout Plain Layout


\backslash
State{$c_{estimate} 
\backslash
leftarrow 
\backslash
mathcal{M} 
\backslash
left( 
\backslash
mathcal{H}, a 
\backslash
right) $}
\backslash
Comment{Estimate $c$ for HP $a$ using history $
\backslash
mathcal{H}$}
\end_layout

\begin_layout Plain Layout


\backslash
State{$p
\backslash
leftarrow
\backslash
frac{c_{max}-c_{estimate}}{c_{max}-c_{min}}$}
\end_layout

\begin_layout Plain Layout


\backslash
State{$x
\backslash
sim U
\backslash
left( 
\backslash
left[ 0, 1
\backslash
right] 
\backslash
right)$}
\end_layout

\begin_layout Plain Layout


\backslash
If{$x < p$} 
\backslash
State {$
\backslash
text{rejected}
\backslash
leftarrow
\backslash
text{false}$}
\backslash
EndIf
\end_layout

\begin_layout Plain Layout


\backslash
EndWhile
\end_layout

\begin_layout Plain Layout


\backslash
State{$result 
\backslash
leftarrow run
\backslash
left( a 
\backslash
right)$}
\backslash
Comment{Run experiment with HP values $a$}
\end_layout

\begin_layout Plain Layout


\backslash
State{$
\backslash
mathcal{H} 
\backslash
leftarrow  
\backslash
mathcal{H} + 
\backslash
left( a, result 
\backslash
right)$}
\end_layout

\begin_layout Plain Layout


\backslash
EndWhile
\end_layout

\begin_layout Plain Layout


\backslash
end{algorithmic}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Biased random search
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
As an illustration, we ran all 3 methods on the task described in 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:autoencoder-benchmark"

\end_inset

, using standard stochastic gradient descent with fixed minibatch size,
 for a fixed number of parameter updates.
 We tune 2 hyperparameters: the learning rate and the variance of the initial
 random weights, and plot the result in 
\begin_inset CommandInset ref
LatexCommand ref
reference "hptune-comparison"

\end_inset

.
 These plots show the interaction between 2 hyperparameters.
\end_layout

\begin_layout Standard
These plots and this random search technique are a key component for assessing
 the true performance of optimization techniques that we present in section
 3.
 Indeed it is easy to experimentally find that a new optimization technique
 gives better performance than a baseline if we spend too much time tuning
 hyperparameters for our new technique.
\end_layout

\begin_layout Standard
To assess the performance of biased random search we ran 100 searches of
 100 experiments on a simple task where we tuned 2 hyperparameters.
 We observe that it consistently find comparable or better results than
 standard random search (lower is better):
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="3">
<features tabularvalignment="middle">
<column alignment="right" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="right" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
HP tuning procedure
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Average
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Standard deviation
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Grid search
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
27.23
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.42
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Random search
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
27.02
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.28
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Biased random search
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
26.61
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
0.13
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename figures/hp_search.pdf
	width 100text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Comparison of hyperparameter tuning methods.
 On the left a grid search, in the middle a random search and on the right
 a biased random search.
 Each experiment consisted in 100 iterations of SGD from a randomly initialized
 network.
 We tune 2 hyperparameters on the x and y axis (what they represent is not
 relevant here).
 The color scale represents the final loss attained after a fixed number
 of iterations.
 The best experiments are in blue, the worst experiments in yellow.
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "hptune-comparison"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename figures/hp_search_correl.pdf
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Relation between 2 hyperparameters: for this experiment we can clearly see
 that the plotted hyperparameters are not independant one from each other.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section
Limits of (stochastic) gradient descent and some directions to overcome
 them
\end_layout

\begin_layout Standard
We can think of the task of training a neural network as the one of finding
 the minimum of a scalar field in 
\begin_inset Formula $n$
\end_inset

 dimensions, 
\begin_inset Formula $n$
\end_inset

 being the number of parameters.
 Each gradient descent step is a small shift in this field.
 Every gradient update has approximately the same magnitude, controlled
 by the learning rate.
 We must ensure that this path in the field of the empirical risk is feasible.
 We now present reasons that can make this field have a pathological structure,
 and directions to avoid these difficulties.
\end_layout

\begin_layout Subsection
Gradient magnitudes
\end_layout

\begin_layout Standard
A common issue for deep networks or recurrents networks is how to control
 the magnitude of the gradient flow for many layers.
 If the jacobians 
\begin_inset Formula $\left(\mathbf{J}_{a_{l}}^{h_{l}}\right)^{T}\left(\mathbf{J}_{h_{l+1}}^{a_{l}}\right)^{T}$
\end_inset

 have a spectral norm that is too big, then the gradient will become bigger
 and bigger for lower layers.
 This can happen if the weight matrices have singular values that are too
 big compared to 
\begin_inset Formula $1$
\end_inset

, or if the derivatives of the activation functions take big values.
 In this case, we are in a situation of exploding gradients.
 This effect is amplified in recurrent networks, where the same weight matrix
 is repeatedly used in the backward pass.
 For such a ill-conditioned problem, gradient descent will not be effective.
 Indeed, in the case of exploding gradient, two layers separated by several
 others will have updates of different order of magnitude.
\end_layout

\begin_layout Standard
This effect can be mitigated using gradient clipping 
\begin_inset CommandInset citation
LatexCommand cite
key "pascanu2013difficulty"

\end_inset

.
 Perhaps less known is the fact that we can also use second order methods
 to compensate for gradient vanishing/exploding 
\begin_inset CommandInset citation
LatexCommand cite
key "martens2011learning"

\end_inset

, that we will present in chapter 3.
\end_layout

\begin_layout Subsection
Initialization
\begin_inset CommandInset label
LatexCommand label
name "initialization-of-weights"

\end_inset


\end_layout

\begin_layout Standard
Initialization of the weight matrices is of crucial importance.
 In terms of our empirical risk field in the space of parameters, it controls
 how far we start from a minimum.
 A good initialization scheme must at least make sure that there is enough
 signal flowing in forward and backward direction, that is: the weights
 must be chosen not too small, otherwise the forward signal will be smaller
 and smaller, and in the meantime the weights must not be too big, so as
 to avoid exploding gradients in the backward pass, and saturating functions
 in the forward pass.
\end_layout

\begin_layout Standard
The most common initialization scheme at the time of writing are Glorot
 initialization 
\begin_inset CommandInset citation
LatexCommand cite
key "glorot2010understanding"

\end_inset

 and He initialization 
\begin_inset CommandInset citation
LatexCommand cite
key "he2015delving"

\end_inset

.
 Glorot takes care of maintaining a training signal during the forward pass,
 and the backward pass, by sampling random weights from an uniform distribution
 with variance 
\begin_inset Formula $\frac{\alpha}{n_{in}+n_{out}}$
\end_inset

, while He argues that only the forward pass matters so the weights should
 be initialized from a distribution with variance 
\begin_inset Formula $\frac{\alpha}{n_{in}}$
\end_inset

.
 In both cases, 
\begin_inset Formula $\alpha$
\end_inset

 depends on the activation function, and the papers propose default values
 for sigmoid and ReLU 
\begin_inset CommandInset citation
LatexCommand cite
key "glorot2011deep"

\end_inset

.
 In our experiments, we treated 
\begin_inset Formula $\alpha$
\end_inset

 as a hyperparameter, and tuned it using a biased random search 
\begin_inset CommandInset ref
LatexCommand ref
reference "biased-random-search"

\end_inset

.
\end_layout

\begin_layout Subsection
Gradient smoothing methods
\end_layout

\begin_layout Standard
A family of optimization tricks make use of the representation of the empiriral
 risk as a manifold in the space of the parameters.
 In this case with some common sense we can define a simple principle to
 derive better updates which is that for an equivalent decrease of the empirical
 risk, we must follow a direction of descent that has a lower derivative
 for longer in order to achieve the same improvement as for a direction
 that has a greater derivative.
 Many popular techniques use this principle, the most successful ones at
 the time of writing being Adam 
\begin_inset CommandInset citation
LatexCommand cite
key "kingma2014adam"

\end_inset

, RMSProp 
\begin_inset CommandInset citation
LatexCommand cite
key "tieleman2012lecture"

\end_inset

, Nesterov momentum and so on.
\end_layout

\begin_layout Section
A standard benchmark: Autoencoding written digits
\begin_inset CommandInset label
LatexCommand label
name "sec:autoencoder-benchmark"

\end_inset


\end_layout

\begin_layout Standard
We now describe the main benchmark that we will be using in the rest of
 this document.
 The dataset MNIST 
\begin_inset CommandInset citation
LatexCommand cite
key "lecun2010mnist"

\end_inset

 is composed of 60.000 
\begin_inset Formula $28\times28$
\end_inset

 grayscale images of handwritten digits, and the corresponding value of
 the digit that is represented in the image.
 For this benchmark, we use an autoencoder 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Autoencoders"

\end_inset

 with layer sizes 
\begin_inset Formula $\left\{ 784,1000,500,250,30,250,500,1000,784\right\} $
\end_inset

.
 The autoencoder encodes the input image into a vector of size 
\begin_inset Formula $30$
\end_inset

, and then decodes it to reconstruct the original image.
 We use the quadratic error 
\begin_inset Formula $l\left(f\left(x\right),y\right)=\left\Vert f\left(x\right)-y\right\Vert _{2}^{2}$
\end_inset

.
 The benchmark consists in minimizing the empirical risk over the train
 set after a fixed time on the same architecture.
\end_layout

\begin_layout Standard
This benchmark has a long history in the neural network optimization litterature
 
\begin_inset CommandInset citation
LatexCommand cite
key "hinton2006reducing,martens2010deep,martens2015optimizing,desjardins2015natural"

\end_inset

.
 To assess the performance of an algorithm, we can use 2 metrics: the empirical
 risk after a given number of iterations of the algorithm, and the empirical
 risk after a fixed elapsed time for a given computer.
 In real world tasks, the latter is more useful.
 It gives a better understanding of the trade-off between a more complex
 update that takes longer to compute and gives a better improvement, and
 a fast update that gives a small improvement, but that can be iterated
 several times in the meantime.
\end_layout

\begin_layout Standard
The limits of the benchmark are many.
 In particular the fact that the state of the art papers in computer vision
 do not use MLPs and sigmoid activations but rather variants of mixed convolutio
nal networks and residual connections, and variants of ReLU activations.
 Another limit is in the use of the quadratic loss.
 Nonetheless, we still use this benchmark as it is used by several other
 papers which allows for a fair comparison, and because it is reasonably
 deep (8 layers) and wide (the biggest weight matrix has size 
\begin_inset Formula $1000\times784$
\end_inset

).
\end_layout

\begin_layout Chapter
Advanced optimization of neural networks
\end_layout

\begin_layout Standard
Gradient descent is a black box technique that can be applied to any kind
 of optimization problem.
 But we are interested in optimizing a very specific function, which is
 a sum of stacked transformations and a loss function.
 In this section, we introduce the well known second order methods known
 as Newton's method and Natural gradient descent.
 We then derive the updates of this methods adapted to neural networks,
 and show how second order methods can be approximated in order to be applied
 to real scale tasks.
\end_layout

\begin_layout Section
Second order methods
\end_layout

\begin_layout Subsection
Newton steps
\end_layout

\begin_layout Standard
Second order methods refers to all optimization methods that make use of
 the second derivative or Hessian matrix of the function to be minimized.
 It follows from the Taylor series decomposition of the function to be minimized
:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
f\left(x+\Delta x\right) & = & f\left(x\right)+\left(\nabla f\right)_{x}^{T}\Delta x+\frac{1}{2}\Delta x^{T}\left(\nabla^{2}f\right)_{x}\Delta x+o\left(\left\Vert \Delta x\right\Vert _{2}^{2}\right)
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\left(\nabla^{2}f\right)_{x}$
\end_inset

 is the Hessian matrix of 
\begin_inset Formula $f$
\end_inset

, expressed in 
\begin_inset Formula $x$
\end_inset

.
 We use the little-o notation 
\begin_inset Formula $o$
\end_inset

 that represents an unknown function with the only property that 
\begin_inset Formula $\lim_{x\rightarrow0}\frac{o\left(x\right)}{x}=0$
\end_inset

.
 By ignoring higher order terms (
\begin_inset Formula $o\left(\left\Vert \Delta x\right\Vert _{2}^{2}\right)=0$
\end_inset

) we have a quadratic approximation for 
\begin_inset Formula $f$
\end_inset

.
 Using this approximation in a minimization problem, we get a closed form
 solution:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
\Delta x^{*} & = & \text{argmin}_{\Delta x}f\left(x+\Delta x\right)\\
 & \approx & \text{argmin}_{\Delta x}f\left(x\right)+\left(\nabla f\right)_{x}^{T}\Delta x+\frac{1}{2}\Delta x^{T}\left(\nabla^{2}f\right)_{x}\Delta x
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
This expression is solved by taking the derivative with respect to 
\begin_inset Formula $\Delta x$
\end_inset

, and setting it to zero in order to obtain:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
\left(\nabla^{2}f\right)_{x}\Delta x & = & -\left(\nabla f\right)_{x}
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
If we assume that 
\begin_inset Formula $f$
\end_inset

 has a minimum in 
\begin_inset Formula $x^{*}$
\end_inset

, then the Hessian will be positive definite in 
\begin_inset Formula $x^{*}$
\end_inset

, and under the supplementary assumption that the Hessian is continuous,
 it will also be positive definite in a neighborhood of 
\begin_inset Formula $x^{*}$
\end_inset

.
 In this case, it is invertible and we get the solution:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray}
\Delta x & = & -\left(\nabla^{2}f\right)_{x}^{-1}\left(\nabla f\right)_{x}\label{eq:newton-step}
\end{eqnarray}

\end_inset


\end_layout

\begin_layout Standard
This update 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:newton-step"

\end_inset

 is called the 
\series bold
Newton step
\series default
.
 By making several iterations of Newton, and under the assumption that we
 are close enough to a minimum, the updates will converge to a minimum.
\end_layout

\begin_layout Standard
The main difficulty of this algorithm is that it does not scale well when
 applied to problems with many variables such as neural network optimization.
 The limitations come from the following aspects:
\end_layout

\begin_layout Enumerate

\shape italic
Getting the value of the Hessian matrix
\shape default
: Using an automatic differentiation software, we can get an expression
 for the Hessian, by differentiating the symbolic expression of the gradient.
 But unlike the computation of the gradient, the graph produced to compute
 the Hessian will have much more nodes.
 We will explore this question in more details in 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:gauss-newton"

\end_inset

.
\end_layout

\begin_layout Enumerate

\shape italic
Storing the Hessian matrix
\shape default
: The Hessian matrix is a square matrix of size 
\begin_inset Formula $n_{\text{parameters}}\times n_{parameters}$
\end_inset

.
 As the number of parameters grows, which is the case when building deep
 networks, the memory required to store the Hessian will grow in 
\begin_inset Formula $O\left(n^{2}\right)$
\end_inset

.
 We will present an approximation of the Hessian that saves memory in 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Block-diagonal-Hessian"

\end_inset

.
\end_layout

\begin_layout Enumerate

\shape italic
Inverting the Hessian matrix
\shape default
: Inverting the Hessian matrix is also costly as it grows in 
\begin_inset Formula $O\left(n^{3}\right)$
\end_inset

 with the size of the matrix.
 Some techniques use 2nd order information without inverting the Hessian
 such as 
\shape italic
Hessian Free
\shape default
 
\begin_inset CommandInset citation
LatexCommand cite
key "martens2010deep"

\end_inset

.
 We propose to factorize the Hessian so as to require inverting a smaller
 matrix while benefiting from some 2nd order information in 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:focus-covariance"

\end_inset

.
\end_layout

\begin_layout Subsection
The learning rate
\end_layout

\begin_layout Standard
Amongst other hyperparameters, the learning rate of standard (stochastic)
 gradient descent plays a particular role which we will show in the following.
 We use the quadratic approximation for a function 
\begin_inset Formula $f$
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
\Delta x^{*} & = & \text{argmin}_{\Delta x}f\left(x\right)+\left(\nabla f\right)_{x}^{T}\Delta x+\frac{1}{2}\Delta x^{T}\left(\nabla^{2}f\right)_{x}\Delta x+o\left(\left\Vert \Delta x\right\Vert _{2}^{2}\right)
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
If we ignore the second derivative and higher order terms we can simplify
 this expression to the following one that is often used for deriving the
 first order gradient descent update:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
\Delta x^{*} & \approx & \text{argmin}_{\Delta x}f\left(x\right)+\left(\nabla f\right)_{x}^{T}\Delta x+\frac{\lambda}{2}\Delta x^{T}\Delta x
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
By solving this minimization problem we recover the update 
\begin_inset Formula $\Delta x^{*}=-\frac{1}{\lambda}\left(\nabla f\right)_{x}$
\end_inset

.
 But of course this 
\begin_inset Formula $\lambda$
\end_inset

 
\begin_inset Quotes eld
\end_inset

hides
\begin_inset Quotes erd
\end_inset

 second order information.
 In fact, 
\begin_inset CommandInset citation
LatexCommand cite
key "lecun1993automatic"

\end_inset

 proposes to automatically adapt the value of the learning rate by using
 the biggest eigenvalue of the hessian as 
\begin_inset Formula $\lambda$
\end_inset

.
 In this case we are guaranteed to go as far as possible in the direction
 of greatest curvature (the corresponding eigenvector).
\end_layout

\begin_layout Subsection
Validity of Newton for non quadratic functions and Tikhonov regularization
\end_layout

\begin_layout Standard
In the previous section, we considered that our function was approximated
 by its second order Taylor series decomposition.
 While this is true in a neighborhood of 
\begin_inset Formula $x$
\end_inset

, the approximation becomes less precise as we move away from 
\begin_inset Formula $x$
\end_inset

.
 In particular this is the case when the Newton step provide big updates,
 that is when the Hessian has at least one small eigenvalue.
 The corresponding eigenvector points in a direction that will have a low
 curvature using the quadratic approximation, so the minimum following this
 direction will be far away.
 But the actual function that we are minimizing is not a quadratic, and
 the terms hidden in 
\begin_inset Formula $o\left(\left\Vert \Delta x\right\Vert _{2}^{2}\right)$
\end_inset

 will become preponderant for bigger values of 
\begin_inset Formula $\Delta x$
\end_inset

.
\end_layout

\begin_layout Standard
To counter this undesirable effect, we simply add a regularization term
 that penalizes bigger values of 
\begin_inset Formula $\Delta x$
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
\Delta x^{*} & = & \text{argmin}_{\Delta x}f\left(x+\Delta x\right)\\
 & \approx & \text{argmin}_{\Delta x}f\left(x\right)+\left(\nabla f\right)_{x}^{T}\Delta x+\frac{1}{2}\Delta x^{T}\left(\nabla^{2}f\right)_{x}\Delta x+\frac{\epsilon}{2}\left\Vert \Delta x\right\Vert _{2}^{2}\\
 & = & \text{argmin}_{\Delta x}\left(\nabla f\right)_{x}^{T}\Delta x+\frac{1}{2}\Delta x^{T}\left(\left(\nabla^{2}f\right)_{x}+\epsilon\mathbf{I}\right)\Delta x
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
This gives the Tikhonov regularized version of the Newton step:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
\Delta x & = & -\left(\left(\nabla^{2}f\right)_{x}+\epsilon\mathbf{I}\right)^{-1}\left(\nabla f\right)_{x}
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
This new hyperparameter 
\begin_inset Formula $\epsilon$
\end_inset

 controls the size of the steps, and thus plays a very similar role to the
 learning rate.
\end_layout

\begin_layout Standard
In addition to this, we can also mention that it stabilizes the inversion
 when the condition number of 
\begin_inset Formula $\left(\nabla^{2}f\right)_{x}$
\end_inset

 is too big, and that it can account for the estimation error when we estimate
 
\begin_inset Formula $\left(\nabla^{2}f\right)_{x}$
\end_inset

 using a minibatch of examples instead of using the true risk.
\end_layout

\begin_layout Subsection
Gauss-Newton approximation of the Hessian
\begin_inset CommandInset label
LatexCommand label
name "subsec:gauss-newton"

\end_inset


\end_layout

\begin_layout Standard
In the case of neural network optimization, the Hessian matrix we need to
 evaluate is the second derivative of the empirical risk, with respect to
 the parameters.
 A first remark that we can make, is that it is also composed of a sum of
 second order derivatives, to be computed at each example of the dataset:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
\mathbf{H} & = & \frac{\partial^{2}R}{\partial\theta^{2}}\\
 & = & \frac{\partial^{2}}{\partial\theta^{2}}\left\{ \frac{1}{n}\sum_{i}l\left(f\left(x_{i},\theta\right),y_{i}\right)\right\} \\
 & = & \frac{1}{n}\sum_{i}\frac{\partial^{2}}{\partial\theta^{2}}\left\{ l\left(f\left(x_{i},\theta\right),y_{i}\right)\right\} 
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
By making use of the chain rule we can also give an expression for the second
 derivative of the loss, for a single example.
 We start with the first derivative:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
\frac{\partial}{\partial\theta}\left\{ l\left(f\left(x_{i},\theta\right),y_{i}\right)\right\}  & = & \mathbf{J}_{\theta}\left(x_{i},\theta\right)^{T}\left(\frac{\partial}{\partial f}\left\{ l\left(f\left(x_{i},\theta\right),y_{i}\right)\right\} \right)^{T}
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\mathbf{J}$
\end_inset

 is the jacobian of the output of the network 
\begin_inset Formula $f$
\end_inset

 with respect to the parameters 
\begin_inset Formula $\theta$
\end_inset

.
 In this notation we made the dependance in 
\begin_inset Formula $\theta$
\end_inset

 of both parts of the product explicit.
 Note that both parts also take different values for each examples 
\begin_inset Formula $x_{i}$
\end_inset

.
 We now derive this expression once more to obtain the Hessian:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
\frac{\partial^{2}}{\partial\theta^{2}}\left\{ l\left(f\left(x_{i},\theta\right),y_{i}\right)\right\}  & = & \underbrace{\mathbf{J}_{\theta}\left(x_{i},\theta\right)^{T}\frac{\partial^{2}}{\partial f^{2}}\left\{ l\left(f\left(x_{i},\theta\right),y_{i}\right)\right\} \mathbf{J}_{\theta}\left(x_{i},\theta\right)}_{G_{f}\left(x_{i},\theta\right)}\\
 &  & +\sum_{j}\left(\nabla^{2}f_{j}\left(x_{i},\theta\right)\right)\left(\frac{\partial}{\partial f_{j}}\left\{ l\left(f\left(x_{i},\theta\right),y_{i}\right)\right\} \right)^{T}
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $G_{f}\left(x_{i},\theta\right)$
\end_inset

 is called the Gauss-Newton approximation of the Hessian 
\begin_inset CommandInset citation
LatexCommand cite
key "schraudolph2002fast"

\end_inset

.
 The remainder is proportional to 
\begin_inset Formula $\frac{\partial}{\partial f_{j}}\left\{ l\left(f\left(x_{i},\theta\right),y_{i}\right)\right\} $
\end_inset

.
 As we get closer to the the optimum, this part will go toward 
\begin_inset Formula $0$
\end_inset

 as it is a first derivative, so the approximation will get more precise.
 At a minimum for 
\begin_inset Formula $l\left(f\left(x_{i},\theta\right),y_{i}\right)$
\end_inset

, we will have 
\begin_inset Formula $\frac{\partial^{2}}{\partial\theta^{2}}\left\{ l\left(f\left(x_{i},\theta\right),y_{i}\right)\right\} =G_{f}\left(x_{i},\theta\right)$
\end_inset

 so it is a reasonable approximation to use in practice.
 Note that a minimum for the empirical risk 
\begin_inset Formula $R\left(\theta\right)$
\end_inset

 will not necessarily be a minimum for each example 
\begin_inset Formula $l\left(f\left(x_{i},\theta\right),y_{i}\right)$
\end_inset

, especially if the capacity of the neural network is not sufficient to
 model the data distribution.
\end_layout

\begin_layout Standard
In terms of computational cost, we can also note that we can compute the
 GN part using standard backpropagation, but this time of the jacobian.
 The other term is much more complicated because it involves a second derivative
 of a composed function.
 To illustrate this point we write the first and second derivatives of a
 scalar function 
\begin_inset Formula $f\circ g\circ h:\mathbb{R}\rightarrow\mathbb{R}$
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
\left(f\circ g\circ h\right)' & = & \left(f'\circ g\circ h\right)\left(g'\circ h\right)h'\\
\left(f\circ g\circ h\right)^{(2)} & = & \left(f^{\left(2\right)}\circ g\circ h\right)\left(\left(g'\circ h\right)h'\right)^{2}+\left(f'\circ g\circ h\right)\left(g^{\left(2\right)}\circ h\right)\left(h'\right)^{2}+\left(f'\circ g\circ h\right)\left(g'\circ h\right)h^{\left(2\right)}
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
The second derivative requires derivating once more each term in the chain
 rule.
 For this simple example of 3 composed functions, this translates into 3
 backpropagations.
 For bigger networks it quickly becomes very slow.
\end_layout

\begin_layout Standard
In practice, 
\begin_inset Formula $G_{f}\left(x_{i},\theta\right)$
\end_inset

 presents a much more convenient expression for common loss functions, as
 the second derivative of the loss with respect to the ouput of the network
 simplifies (
\begin_inset CommandInset ref
LatexCommand ref
reference "gn-loss"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features tabularvalignment="middle">
<column alignment="right" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="right" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Loss function
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\frac{\partial^{2}}{\partial f^{2}}\left\{ l\left(f\left(x_{i},\theta\right),y_{i}\right)\right\} $
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
quadratic error
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathbf{I}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
cross entropy for binary decision
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\frac{y_{i}}{\left(f(x_{i},\theta)\right)^{2}}+\frac{1-y_{i}}{\left(1-f(x_{i},\theta)\right)^{2}}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
cross entropy for multiclass classification
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\text{diag}\left(\frac{y_{i}}{\left(f(x_{i},\theta)\right)^{2}}\right)$
\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "gn-loss"

\end_inset

Expressions for the Gauss-Newton approximation of the Hessian, for a single
 example 
\begin_inset Formula $x_{i}$
\end_inset

.
 For the cross entropy, all operations (division, squarred value) are elementwis
e, and the 
\begin_inset Formula $\text{diag}$
\end_inset

 function transforms a vector into a diagonal matrix with the vector values
 on its diagonal.
 Full derivation in appendix.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
We finally give an expression for the Gauss-Newton approximation of the
 Hessian for the empirical risk:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
G_{f}\left(\theta\right) & = & \frac{1}{n}\sum_{i}\mathbf{J}_{\theta}\left(x_{i},\theta\right)^{T}D\left(f\left(x_{i},\theta\right),y_{i}\right)\mathbf{J}_{\theta}\left(x_{i},\theta\right)
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
We will show in 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:2ndorder-newpers"

\end_inset

 that this matrix can be factorized to design optimization algorithms adapted
 to the particular structure of neural networks.
\end_layout

\begin_layout Subsection
Interpretation from the output of the network
\end_layout

\begin_layout Standard
We can rewrite the GN matrix applied to an update as a norm in the space
 of the output of the network:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
\Delta\theta^{*} & = & \text{argmin}_{\Delta\theta}\left(\nabla R\right)_{\theta}^{T}\Delta\theta+\frac{1}{2}\Delta\theta^{T}\frac{1}{n}\sum_{i}\mathbf{J}\left(x_{i},\theta\right)^{T}D\left(f\left(x_{i},\theta\right),y_{i}\right)\mathbf{J}\left(x_{i},\theta\right)\Delta\theta+\frac{\epsilon}{2}\left\Vert \Delta\theta\right\Vert _{2}^{2}\\
 & = & \text{argmin}_{\Delta\theta}\left(\nabla R\right)_{\theta}^{T}\Delta\theta+\frac{1}{2}\frac{1}{n}\sum_{i}\left\Vert \sqrt{D\left(f\left(x_{i},\theta\right),y_{i}\right)}\mathbf{J}\left(x_{i},\theta\right)\Delta\theta\right\Vert _{2}^{2}+\frac{\epsilon}{2}\left\Vert \Delta\theta\right\Vert _{2}^{2}
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
By an abuse of notation we denoted by 
\begin_inset Formula $\sqrt{\,}$
\end_inset

 an elementwise square root.
 Written like this GN can be considered a first order measure of what will
 be the impact of a 
\begin_inset Formula $\Delta\theta$
\end_inset

 in terms of change of the output of the network as measured by some metrics
 
\begin_inset Formula $D\left(f\left(x_{i},\theta\right),y_{i}\right)$
\end_inset

 dependent on the example considered.
 It constrains all changes to induce a comparable change on the output.
 Interestingly, for log losses (binary and multiclass crossentropy) we have
 the unexpected equivalence 
\begin_inset Formula $\left(\sqrt{D\left(f\left(x_{i},\theta\right),y_{i}\right)}\right)_{t}=-\left(\frac{\partial l}{\partial f}\right)^{T}$
\end_inset

 and 
\begin_inset Formula $\left(\sqrt{D\left(f\left(x_{i},\theta\right),y_{i}\right)}\right)_{i}=0$
\end_inset

 when 
\begin_inset Formula $i\neq t$
\end_inset

, where 
\begin_inset Formula $t$
\end_inset

 is the true class, that is the only index of 
\begin_inset Formula $y$
\end_inset

 that equal to 
\begin_inset Formula $1$
\end_inset

.
 This can be combined with the jacobian to give the simplified formulation:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
\Delta\theta^{*} & = & \text{argmin}_{\Delta\theta}\left(\nabla R\right)_{\theta}^{T}\Delta\theta+\frac{1}{2}\frac{1}{n}\sum_{i}\left\Vert -\left(\frac{\partial l}{\partial f}\right)^{T}\mathbf{J}\left(x_{i},\theta\right)\Delta\theta\right\Vert _{2}^{2}+\frac{\epsilon}{2}\left\Vert \Delta\theta\right\Vert _{2}^{2}\\
 & = & \text{argmin}_{\Delta\theta}\left(\nabla R\right)_{\theta}^{T}\Delta\theta+\frac{1}{2}\frac{1}{n}\sum_{i}\left\Vert \left(\nabla l\left(f\left(x_{i},\theta\right),y_{i}\right)\right)_{\theta}^{T}\Delta\theta\right\Vert _{2}^{2}+\frac{\epsilon}{2}\left\Vert \Delta\theta\right\Vert _{2}^{2}
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
This gives an explanation of the outer product metrics mentionned in 
\begin_inset CommandInset citation
LatexCommand cite
key "ollivier2013riemannian"

\end_inset

.
\end_layout

\begin_layout Subsection
Block diagonal Hessian 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Block-diagonal-Hessian"

\end_inset


\end_layout

\begin_layout Standard
Apart from the issue of computing a value for the hessian matrix, a main
 limit is that we need to invert it.
 The hessian matrix has size 
\begin_inset Formula $n_{\text{parameters}}\times n_{\text{parameters}}$
\end_inset

, and the procedure used for numerically inverting a square matrix requires
 
\begin_inset Formula $O\left(n^{3}\right)$
\end_inset

 operations so it rapidly becomes untractable for deep networks.
 A first approximation we make is by ignoring the interactions between the
 parameters of different layers.
 We make the hessian block diagonal, each block having the size of the number
 of parameters of the corresponding layer.
 An interesting property of block diagonal matrices is that we get the inverse
 by inverting every smaller block separately:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
\left(\nabla^{2}f\right)^{-1} & \approx & \left(\begin{array}{cccc}
\mathbf{H}_{1} & 0 & \cdots & 0\\
0 & \mathbf{H}_{2} &  & \vdots\\
\vdots &  & \ddots & 0\\
0 & \cdots & 0 & \mathbf{H}_{n}
\end{array}\right)^{-1}=\left(\begin{array}{cccc}
\mathbf{H}_{1}^{-1} & 0 & \cdots & 0\\
0 & \mathbf{H}_{2}^{-1} &  & \vdots\\
\vdots &  & \ddots & 0\\
0 & \cdots & 0 & \mathbf{H}_{n}^{-1}
\end{array}\right)
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
It also makes the implementation easier, as we can treat each block 
\begin_inset Quotes eld
\end_inset

locally
\begin_inset Quotes erd
\end_inset

 in the network, and use its inverse to update the gradient direction for
 the corresponding block (or layer) using 
\begin_inset Formula $\theta_{i}\leftarrow\theta_{i}-\lambda\mathbf{H}_{i}^{-1}\frac{\partial C}{\partial\theta_{i}}$
\end_inset

.
 We do not need to store a big 
\begin_inset Formula $n_{\text{parameters}}\times n_{\text{parameters}}$
\end_inset

 matrix.
\end_layout

\begin_layout Section
Natural gradient methods
\end_layout

\begin_layout Subsection
Fisher Information Matrix
\end_layout

\begin_layout Standard
The Fisher information matrix (FIM) is well used in statistics.
 In the context of machine learning, and in particular deep learning, we
 use its inverse as a preconditioner for the gradient descent algorithm,
 similarly to the Newton algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:newton-step"

\end_inset

.
 In this section, we show how the FIM can be derived from the KL divergence
 and how we get a better 
\begin_inset Quotes eld
\end_inset

natural
\begin_inset Quotes erd
\end_inset

 gradient using this information.
 Let us first write the definition of the KL divergence for 2 distributions
 
\begin_inset Formula $p$
\end_inset

 and 
\begin_inset Formula $q$
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
\text{KL}\left(p\parallel q\right) & = & \mathbb{E}_{p}\left[\log\left(\frac{p}{q}\right)\right]
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
It is a non-negative quantity that resembles a measure of how much 
\begin_inset Formula $q$
\end_inset

 differs from 
\begin_inset Formula $p$
\end_inset

.
 In particular, 
\begin_inset Formula $\text{KL}\left(p\parallel q\right)=0$
\end_inset

 when 
\begin_inset Formula $p=q$
\end_inset

.
 Note that it is not symmetric, so it can not directly be used as a metric.
\end_layout

\begin_layout Standard
The idea of the natural gradient is to use the KL divergence as a regularizer
 when doing gradient descent.
 We will denote by 
\begin_inset Formula $p_{\theta}$
\end_inset

 a parametric model and 
\begin_inset Formula $\Delta\theta$
\end_inset

 a change in its parameter values.
 
\begin_inset Formula $\text{KL}\left(p_{\theta}\parallel p_{\theta+\Delta\theta}\right)$
\end_inset

 is used as our regularizer, so that each change 
\begin_inset Formula $\Delta\theta$
\end_inset

 gives the same change in the distribution space.
 Instead of using the full expression for 
\begin_inset Formula $\text{KL}\left(p_{\theta}\parallel p_{\theta+\Delta\theta}\right)$
\end_inset

 we will use its second order Taylor series around 
\begin_inset Formula $\theta$
\end_inset

 (for full derivation see for instance 
\begin_inset CommandInset citation
LatexCommand cite
key "pascanu2013revisiting"

\end_inset

):
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
\text{KL}\left(p_{\theta}\Vert p_{\theta+\Delta\theta}\right) & = & \Delta\theta^{T}\mathbf{F}\Delta\theta+o(\left\Vert \Delta\theta\right\Vert _{2}^{2})
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\mathbf{F}=\mathbb{E}_{x}\left[\left(\frac{\partial\log p_{\theta}\left(x\right)}{\partial\theta}\right)^{T}\left(\frac{\partial\log p_{\theta}\left(x\right)}{\partial\theta}\right)\right]$
\end_inset

 is the Fisher information matrix, which can now be used directly as a regulariz
er.
 Interestingly, even if the KL divergence is not symmetric, its second order
 approximation is, as we also have 
\begin_inset Formula $\text{KL}\left(p_{\theta+\Delta\theta}\Vert p_{\theta}\right)=\Delta\theta^{T}\mathbf{F}\Delta\theta+o(\left\Vert \Delta\theta\right\Vert _{2}^{2})$
\end_inset

 (note that we swapped the terms in the KL).
\end_layout

\begin_layout Subsection
An expression for the FIM using jacobians
\end_layout

\begin_layout Standard
We use the probabilistic interpretation of neural networks.
 In this case the output is seen as a conditional probability 
\begin_inset Formula $p\left(y|x\right)=f_{\theta}\left(x\right)$
\end_inset

 of observing the value 
\begin_inset Formula $y$
\end_inset

 given an input 
\begin_inset Formula $x$
\end_inset

.
 The FIM can be expressed 
\begin_inset Formula $\mathbf{F}=\mathbb{E}_{x,y\sim p\left(x,y\right)}\left[\left(\frac{\partial\log p_{\theta}\left(x,y\right)}{\partial\theta}\right)^{T}\left(\frac{\partial\log p_{\theta}\left(x,y\right)}{\partial\theta}\right)\right]$
\end_inset

 which simplifies in:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
\mathbf{F} & = & \mathbb{E}_{x,y\sim p\left(x,y\right)}\left[\left(\frac{\partial\log p_{\theta}\left(x,y\right)}{\partial\theta}\right)^{T}\left(\frac{\partial\log p_{\theta}\left(x,y\right)}{\partial\theta}\right)\right]\\
 & = & \mathbb{E}_{x\sim q\left(x\right)}\left[\mathbb{E}_{y\sim p_{\theta}\left(y|x\right)}\left[\left(\frac{\partial\log p_{\theta}\left(x,y\right)}{\partial\theta}\right)^{T}\left(\frac{\partial\log p_{\theta}\left(x,y\right)}{\partial\theta}\right)\right]\right]
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
Since 
\begin_inset Formula $\log p_{\theta}\left(x,y\right)=\log p_{\theta}\left(y|x\right)+\log q\left(x\right)$
\end_inset

 and 
\begin_inset Formula $q$
\end_inset

 does not depend on 
\begin_inset Formula $\theta$
\end_inset

 then this can be further simplified in:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
\mathbf{F} & = & \mathbb{E}_{x\sim q\left(x\right)}\left[\mathbb{E}_{y\sim p_{\theta}\left(y|x\right)}\left[\left(\frac{\partial\log p_{\theta}\left(y|x\right)}{\partial\theta}\right)^{T}\left(\frac{\partial\log p_{\theta}\left(y|x\right)}{\partial\theta}\right)\right]\right]
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
Interestingly, for the usual distributions expressed by neural networks,
 we can derive an exact expression for the inner expectation.
 The FIM takes the following simple form as shown by 
\begin_inset CommandInset citation
LatexCommand cite
key "pascanu2013revisiting"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
\mathbf{F} & = & \mathbb{E}_{x\sim q\left(x\right)}\left[\boldsymbol{J}_{\boldsymbol{y}\left(x\right)}^{T}D\left(\boldsymbol{y}\left(x\right)\right)\boldsymbol{J}_{\boldsymbol{y}\left(x\right)}\right]
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
The values for 
\begin_inset Formula $x$
\end_inset

 are drawn from the data generating distribution 
\begin_inset Formula $q$
\end_inset

.
 The notation 
\begin_inset Formula $\boldsymbol{J}_{\boldsymbol{y}\left(x\right)}$
\end_inset

 is used for the jacobian of the output of the network (i.e.
 the probability expressed at a given 
\begin_inset Formula $x$
\end_inset

 : 
\begin_inset Formula $p\left(y\mid x\right)$
\end_inset

), with respect to the parameters.
 In other words, it measures how much the output of the network will change
 for a given 
\begin_inset Formula $x$
\end_inset

 if we change the parameters.
 
\begin_inset Formula $D$
\end_inset

 is a diagonal matrix with non negative diagonal terms, and depends of the
 cost function used.
 For the quadratic loss it is the identity.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features tabularvalignment="middle">
<column alignment="right" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="right" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Loss function
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $D\left(\boldsymbol{y}\left(x\right)\right)$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
quadratic error
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathbf{I}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
cross entropy for binary decision
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\frac{1}{f_{\theta}\left(x\right)\left(1-f_{\theta}\left(x\right)\right)}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
cross entropy for multiclass classification
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\text{diag}\left(\frac{1}{f_{\theta}\left(x\right)}\right)$
\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "expressions-fisher"

\end_inset

Expressions for the FIM, for a single sample 
\begin_inset Formula $x_{i}$
\end_inset

.
 For the cross entropy, all operations (division, squarred value) are elementwis
e, and the 
\begin_inset Formula $\text{diag}$
\end_inset

 function transforms a vector into a diagonal matrix with the vector values
 on its diagonal.
 Full derivation in appendix.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Approximating the FIM
\end_layout

\begin_layout Standard
The FIM is difficult to compute because of its size (
\begin_inset Formula $n_{parameters}\times n_{parameters}$
\end_inset

) and because in general we do not have an expression for 
\begin_inset Formula $q$
\end_inset

 but only samples from a training dataset.
 As for Newton, we can make the two following approximations:
\end_layout

\begin_layout Itemize
A first approximation that we can make is by ignoring the interactions between
 layers.
 In this case the FIM takes the form of a block diagonal matrix, where each
 block is a square matrix which has the size of the parameters of a layer.
 For a neural network with 
\begin_inset Formula $n_{layers}$
\end_inset

 layers this reduces the FIM into 
\begin_inset Formula $n_{layers}$
\end_inset

 smaller matrices.
 We will denote by 
\begin_inset Formula $\mathbf{F}_{i}$
\end_inset

 the block corresponding to layer 
\begin_inset Formula $i$
\end_inset

.
\end_layout

\begin_layout Itemize
A second common approximation we make in practice is to use the empirical
 FIM for a training dataset of 
\begin_inset Formula $n$
\end_inset

 examples 
\begin_inset Formula $x_{i}$
\end_inset

: 
\begin_inset Formula $\mathbf{F}=\frac{1}{n}\sum_{i}\boldsymbol{J}_{\boldsymbol{y}\left(x_{i}\right)}^{T}D\left(\boldsymbol{y}\left(x_{i}\right)\right)\boldsymbol{J}_{\boldsymbol{y}\left(x_{i}\right)}$
\end_inset

.
\end_layout

\begin_layout Subsection
Natural gradient descent
\end_layout

\begin_layout Standard
The usual gradient descent algorithm can be formulated as the minimization
 of the following expression:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
\Delta\theta^{*} & = & \text{argmin}_{\Delta\theta}\left\{ \Delta\theta^{T}\nabla_{\theta}R+\frac{\epsilon}{2}\left\Vert \Delta\theta\right\Vert ^{2}\right\} 
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
This expression can be easily solved giving the usual gradient descent update
 
\begin_inset Formula $\Delta\theta=-\frac{1}{\epsilon}\nabla_{\theta}R$
\end_inset

.
 The parameter 
\begin_inset Formula $\epsilon$
\end_inset

 is the inverse of the learning rate, and controls how much each parameter
 can change.
 We will now add a new regularizer using the FIM, and transform the minimization
 problem into:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
\Delta\theta^{*} & = & \text{argmin}_{\Delta\theta}\left\{ \Delta\theta^{T}\nabla_{\theta}R+\frac{\epsilon}{2}\left\Vert \Delta\theta\right\Vert ^{2}+\frac{\lambda}{2}\Delta\theta^{T}\mathbf{F}\Delta\theta\right\} 
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
We now constrain our gradient step to be small in term of change of parameter
 values, and also to be small in term of how much the resulting distribution
 changes.
 This expression can be solved to give 
\begin_inset Formula $\Delta\theta^{*}=\frac{1}{\lambda}\left(\mathbf{F}+\frac{\epsilon}{\lambda}\mathbf{I}\right)^{-1}\nabla_{\theta}R$
\end_inset

.
 This expression also gives an insight for the role of 
\begin_inset Formula $\lambda$
\end_inset

 and 
\begin_inset Formula $\epsilon$
\end_inset

, which control 2 different but related quantities expressed by our constraints.
 This new update is called the natural gradient 
\begin_inset CommandInset citation
LatexCommand cite
key "amari1998natural"

\end_inset

.
\end_layout

\begin_layout Subsection
Relation with the GN approximation of the Hessian
\end_layout

\begin_layout Standard
We have just shown that the Gauss-Newton of the empirical risk with respect
 to the parameters, and the Fisher Information Matrix share a similar structure
 that is composed of the jacobians of the output of the network with respect
 to the parameters, and a diagonal matrix.
 The main difference is in this diagonal matrix.
 For Fisher methods it does not depend on any true target and it is just
 an intrinsic property of a neural network, associated with an input distributio
n.
 In the case of the GN matrix it depends on the true target except for the
 quadratic error.
\end_layout

\begin_layout Standard
Note that this share of structure was acknowledged in 
\begin_inset CommandInset citation
LatexCommand cite
key "pascanu2013revisiting"

\end_inset

 but for unsupervised learning, in which case the FIM and the GN are strictly
 equal.
\end_layout

\begin_layout Section
Second order: a new perspective
\begin_inset CommandInset label
LatexCommand label
name "sec:2ndorder-newpers"

\end_inset


\end_layout

\begin_layout Standard
The expressions that we obtained for the FIM and the GN so far are generic
 in the sense that they could be applied to any model and any empirical
 risk composed of a sum of terms.
 We will now exploit the very particular structure of neural networks, to
 obtain a better understanding of how to apply these techniques for real
 tasks.
 
\end_layout

\begin_layout Subsection
Decomposition using the Kronecker product
\end_layout

\begin_layout Standard
In this section, we will show a convenient factorization of the Gauss-Newton
 approximation of the Hessian, that was first applied to the Fisher Information
 Matrix in the litterature 
\begin_inset CommandInset citation
LatexCommand cite
key "martens2015optimizing"

\end_inset

.
 To this end, we will use an operation called the Kronecker product that
 permits giving simple expressions for the GN matrix.
 For 2 matrices 
\begin_inset Formula $A$
\end_inset

 of size 
\begin_inset Formula $m\times n$
\end_inset

 and 
\begin_inset Formula $B$
\end_inset

 of size 
\begin_inset Formula $p\times q$
\end_inset

 it produces a new matrix 
\begin_inset Formula $A\otimes B$
\end_inset

 of size 
\begin_inset Formula $mp\times nq$
\end_inset

 defined by:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
A\otimes B & = & \left(\begin{array}{ccc}
a_{11}B & \cdots & a_{1n}B\\
\vdots & \ddots & \vdots\\
a_{m1}B & \cdots & a_{mn}B
\end{array}\right)
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
Its most interesting property in the context of neural networks is its relations
hip with the 
\begin_inset Formula $vec$
\end_inset

 operation, that 
\begin_inset Quotes eld
\end_inset

flattens
\begin_inset Quotes erd
\end_inset

 a matrix into a vector.
 It is of great use for 2nd order, because the weight matrices can be vectorized
 using 
\begin_inset Formula $vec$
\end_inset

, to give matrix expressions for the Hessian, which otherwise could not
 be written.
 We will make use of the property:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
vec\left(AXB\right) & = & \left(B^{T}\otimes A\right)vec\left(X\right)
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
Getting back to the expression for the Gauss-Newton matrix derived in 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:gauss-newton"

\end_inset

, we use the block diagonal approximation and focus on a single layer defined
 by the linear transformation 
\begin_inset Formula $a=Wh+b$
\end_inset

 and the nonlinearity 
\begin_inset Formula $h'=f\left(a\right)$
\end_inset

.
 We start from the jacobian of the output of the network, with respect to
 the output of the linear transformation 
\begin_inset Formula $a$
\end_inset

, denoted by 
\begin_inset Formula $\mathbf{J}_{a}$
\end_inset

.
 From this jacobian computed by backpropagation, we can get the jacobian
 with respect to the parameters of the layer by making use of the chain
 rule 
\begin_inset Formula $\mathbf{J}_{\theta}=\mathbf{J}_{a}\mathbf{J}_{\theta}^{a}$
\end_inset

.
 We use the notation 
\begin_inset Formula $\mathbf{J}_{\theta}^{a}$
\end_inset

 for the jacobian of 
\begin_inset Formula $a$
\end_inset

 with respect to 
\begin_inset Formula $\theta$
\end_inset

.
 In order to get an expression for this jacobian, we now make use of the
 
\begin_inset Formula $vec$
\end_inset

 operator to transform 
\begin_inset Formula $W$
\end_inset

 into a vector:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
a & = & vec\left(a\right)\\
 & = & vec\left(Wh\right)+b\\
 & = & \left(h^{T}\otimes\mathbf{I}\right)vec\left(W\right)+b
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\mathbf{I}$
\end_inset

 is the identity, of the same size than 
\begin_inset Formula $a$
\end_inset

, that is the output size of the layer.
 We can now give an expression for 
\begin_inset Formula $\mathbf{J}_{vec\left(W\right)}^{a}$
\end_inset

 and 
\begin_inset Formula $\mathbf{J}_{b}^{a}$
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
\mathbf{J}_{b}^{a} & = & \mathbf{I}\\
\mathbf{J}_{vec\left(W\right)}^{a} & = & h^{T}\otimes\mathbf{I}
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
Or, if we stack 
\begin_inset Formula $vec\left(W\right)$
\end_inset

 and 
\begin_inset Formula $b$
\end_inset

 in a vector 
\begin_inset Formula $\theta$
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
\mathbf{J}_{\theta}^{a} & = & \left(\begin{array}{cc}
h^{T} & 1\end{array}\right)\otimes\mathbf{I}
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
And finally by the chain rule:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray}
\mathbf{J}_{\theta} & = & \left(\begin{array}{cc}
h^{T} & 1\end{array}\right)\otimes\mathbf{J}_{a}\label{eq:jaco_factorization}
\end{eqnarray}

\end_inset


\end_layout

\begin_layout Standard
This jacobian is a first order measure of how much the output of the network
 will change if we change the values of the parameters of this layer, for
 a single example.
 Let us now recall the expression of the GN matrix 
\begin_inset Formula $G_{f}=\frac{1}{n}\sum_{i}\mathbf{J}_{\theta}\left(x_{i}\right)^{T}D\left(x_{i}\right)\mathbf{J}_{\theta}\left(x_{i}\right)$
\end_inset

 from 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:gauss-newton"

\end_inset

.
 We can rewrite this expression using the factorization 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:jaco_factorization"

\end_inset

:
\begin_inset Formula 
\begin{eqnarray}
G_{f} & = & \frac{1}{n}\sum_{i}\left[\left(\begin{array}{cc}
h_{i}^{T} & 1\end{array}\right)\otimes\mathbf{J}_{a_{i}}\right]^{T}D\left(x_{i}\right)\left[\left(\begin{array}{cc}
h_{i}^{T} & 1\end{array}\right)\otimes\mathbf{J}_{a_{i}}\right]\nonumber \\
 & = & \frac{1}{n}\sum_{i}\left(\begin{array}{cc}
h_{i}^{T} & 1\end{array}\right)^{T}\left(\begin{array}{cc}
h_{i}^{T} & 1\end{array}\right)\otimes\left(\mathbf{J}_{a_{i}}^{T}D\left(x_{i}\right)\mathbf{J}_{a_{i}}\right)\nonumber \\
 & = & \frac{1}{n}\sum_{i}\left(\begin{array}{cc}
h_{i}h_{i}^{T} & h_{i}\\
h_{i}^{T} & 1
\end{array}\right)\otimes\left(\mathbf{J}_{a_{i}}^{T}D\left(x_{i}\right)\mathbf{J}_{a_{i}}\right)\label{eq:factored}
\end{eqnarray}

\end_inset


\end_layout

\begin_layout Standard
We used the property that 
\begin_inset Formula $\left(A\otimes B\right)\left(C\otimes D\right)=AC\otimes BD$
\end_inset

 when the sizes of the matrices 
\begin_inset Formula $A,B,C,D$
\end_inset

 match.
 This factorization is interesting because it separates the GN matrix into
 a contribution from the backpropagated jacobian (red arrow in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fprop-bprop"

\end_inset

), and a part that only uses the forward statistics and that is local to
 a layer.
 While these 2 contributions are clearly separated for a single example,
 it becomes less clear as we sum up for several examples.
 As we will show in the next section, similar approximations were exploited
 in KFAC 
\begin_inset CommandInset citation
LatexCommand cite
key "martens2015optimizing"

\end_inset

 and Natural Neural Networks 
\begin_inset CommandInset citation
LatexCommand cite
key "desjardins2015natural"

\end_inset

 to build efficient optimization algorithms.
\end_layout

\begin_layout Subsection
Decomposition into 2 smaller matrices
\end_layout

\begin_layout Standard
In second order algorithms, inverting the Hessian matrix is often the limiting
 factor as its computational cost is 
\begin_inset Formula $O\left(n^{3}\right)$
\end_inset

.
 The Kronecker product as the pleasing property that it turns the inversion
 of a big matrix into inverting 2 smaller matrices since 
\begin_inset Formula $\left(A\otimes B\right)^{-1}=A^{-1}\otimes B^{-1}$
\end_inset

.
 In our case, if such a decomposition existed we would reduce the computational
 cost from 
\begin_inset Formula $O\left(n_{in}^{3}n_{out}^{3}\right)$
\end_inset

 to 
\begin_inset Formula $O\left(n_{in}^{3}\right)+O\left(n_{out}^{3}\right)$
\end_inset

.
\end_layout

\begin_layout Standard
Unfortunately, we can not write the GN matrix nor the FIM using 2 matrices
 because it is a sum of Kronecker products, so we aim at finding approximate
 factorizations that will have the required form.
\end_layout

\begin_layout Subsection
Focus on the covariance part of the decomposition
\begin_inset CommandInset label
LatexCommand label
name "subsec:focus-covariance"

\end_inset


\end_layout

\begin_layout Standard
We now suppose that we can use the following approximation:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
\frac{1}{n}\sum_{i}\left(\begin{array}{cc}
h_{i}h_{i}^{T} & h_{i}\\
h_{i}^{T} & 1
\end{array}\right)\otimes\left(\mathbf{J}_{a_{i}}^{T}D\left(x_{i}\right)\mathbf{J}_{a_{i}}\right) & = & \frac{1}{n}\sum_{i}\left(\begin{array}{cc}
h_{i}h_{i}^{T} & h_{i}\\
h_{i}^{T} & 1
\end{array}\right)\otimes\alpha\mathbf{I}=\mathbf{F}_{in}
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
Here 
\begin_inset Formula $\alpha$
\end_inset

 does not depend on 
\begin_inset Formula $i$
\end_inset

.
 This approximation means that we ignore the interactions between the output
 neurons of a layer.
 Instead we just focus on some statistics of the activations of the current
 layer.
 We can interpret this preconditioner as penalizing an update if the correspondi
ng activation has a high variance.
 This makes sense since in this case changing the value here will change
 the next forward propagated signal more that if the variance of the correspondi
ng activation were lower.
 This would result in a bigger expected change in the output.
 
\end_layout

\begin_layout Standard
The left part 
\begin_inset Formula $A=\frac{1}{n}\sum_{i}\left(\begin{array}{cc}
h_{i}h_{i}^{T} & h_{i}\\
h_{i}^{T} & 1
\end{array}\right)$
\end_inset

 corresponds to some statistics on the input of the considered layer.
 It has the size 
\begin_inset Formula $\left(n_{in}+1\right)\times\left(n_{in}+1\right)$
\end_inset

 with the line/column corresponding to the bias.
 We will now derive the update that corresponds to using this matrix 
\begin_inset Formula $\mathbf{F}_{in}$
\end_inset

 as a preconditioner:
\end_layout

\begin_layout Standard
We need to invert 
\begin_inset Formula $A$
\end_inset

.
 This matrix can be inverted blockwise.
 We denote by 
\begin_inset Formula $C=\frac{1}{n}\sum_{i}\left(h_{i}-\frac{1}{n}\sum_{j}h_{j}\right)\left(h_{i}-\frac{1}{n}\sum_{j}h_{j}\right)^{T}$
\end_inset

the covariance matrix of the input vector of the linear layer.
 We get the inverse:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
\left(\begin{array}{cc}
\frac{1}{n}\sum_{i}h_{i}h_{i}^{T} & \frac{1}{n}\sum_{i}h_{i}\\
\frac{1}{n}\sum_{i}h_{i}^{T} & 1
\end{array}\right)^{-1} & = & \left(\begin{array}{cc}
C^{-1} & -C^{-1}\frac{1}{n}\sum_{i}h_{i}\\
-\frac{1}{n}\sum_{i}h_{i}^{T}C^{-1} & 1+\frac{1}{n}\sum_{i}h_{i}^{T}C^{-1}\frac{1}{n}\sum_{i}h_{i}
\end{array}\right)
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
Applying this preconditioner to a gradient update we can get a new update
 for the weight matrix and the bias.
 Let us first recall the gradient for a minibatch of examples.
 In order to be able to use it with our preconditioner we put the parameters
 into a vector 
\begin_inset Formula $\theta=\left(\begin{array}{cc}
\text{vec}\left(W\right)^{T} & b^{T}\end{array}\right)^{T}$
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
\nabla_{\theta}R & = & \frac{1}{n}\sum_{j}\left(\begin{array}{c}
h_{j}\\
1
\end{array}\right)\otimes\nabla_{a_{j}}l
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
The corresponding update is:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
\mathbf{F}_{in}^{-1}\nabla_{\theta}R & = & \frac{1}{n}\sum_{j}\left(\begin{array}{cc}
C^{-1} & -C^{-1}\frac{1}{n}\sum_{i}h_{i}\\
-\frac{1}{n}\sum_{i}h_{i}^{T}C^{-1} & 1+\frac{1}{n}\sum_{i}h_{i}^{T}C^{-1}\frac{1}{n}\sum_{i}h_{i}
\end{array}\right)\left(\begin{array}{c}
h_{j}\\
1
\end{array}\right)\otimes\frac{1}{\alpha}\nabla_{a_{j}}l
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
From this expression we can write the update for 
\begin_inset Formula $W$
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
\Delta\text{vec}\left(W\right) & = & C^{-1}\frac{1}{n}\sum_{j}h_{j}\otimes\frac{1}{\alpha}\nabla_{a_{j}}l-C^{-1}\frac{1}{n}\sum_{i}h_{i}\otimes\frac{1}{n}\sum_{j}\frac{1}{\alpha}\nabla_{a_{j}}l\\
 & = & \frac{1}{\alpha}C^{-1}\frac{1}{n}\sum_{j}\left(h_{j}-\frac{1}{n}\sum_{i}h_{i}\right)\otimes\nabla_{a_{j}}l
\end{eqnarray*}

\end_inset


\begin_inset Formula 
\begin{equation}
\boxed{\Delta W=\frac{1}{\alpha}\frac{1}{n}\sum_{j}\nabla_{a_{j}}l\left(h_{j}-\frac{1}{n}\sum_{i}h_{i}\right)^{T}C^{-1}}\label{eq:upd_w}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
And the update for 
\begin_inset Formula $b$
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
\Delta b & = & -\frac{1}{n}\sum_{j}\frac{1}{n}\sum_{i}h_{i}^{T}C^{-1}h_{j}\frac{1}{\alpha}\nabla_{a_{j}}l+\left(1+\frac{1}{n}\sum_{i}h_{i}^{T}C^{-1}\frac{1}{n}\sum_{i}h_{i}\right)\frac{1}{n}\sum_{j}\frac{1}{\alpha}\nabla_{a_{j}}l\\
 & = & \frac{1}{n}\sum_{j}\frac{1}{\alpha}\nabla_{a_{j}}l-\frac{1}{n}\sum_{j}\frac{1}{n}\sum_{i}h_{i}^{T}C^{-1}\left(h_{j}-\frac{1}{n}\sum_{i}h_{i}\right)\frac{1}{\alpha}\nabla_{a_{j}}l
\end{eqnarray*}

\end_inset


\begin_inset Formula 
\begin{equation}
\boxed{\Delta b=\frac{1}{\alpha}\frac{1}{n}\sum_{j}\nabla_{a_{j}}l-\Delta W\frac{1}{n}\sum_{i}h_{i}}\label{eq:upd_b}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
These expressions are an original contribution.
\end_layout

\begin_layout Subsection
Comparison with standard SGD
\end_layout

\begin_layout Standard
The updates for standard SGD are 
\begin_inset Formula $\Delta_{SGD}b=\frac{1}{n}\sum_{j}\nabla_{a_{j}}l$
\end_inset

 and 
\begin_inset Formula $\Delta_{SGD}W=\frac{1}{n}\sum_{j}\nabla_{a_{j}}l\left(h_{j}\right)^{T}$
\end_inset

.
\end_layout

\begin_layout Standard
The 
\series bold
update for 
\begin_inset Formula $b$
\end_inset


\series default
 gets a new term 
\begin_inset Formula $-\Delta W\frac{1}{n}\sum_{i}h_{i}$
\end_inset

 that permits taking into account the update of 
\begin_inset Formula $W$
\end_inset

.
 In practice, we found that it did not change much as 
\begin_inset Formula $\Delta W$
\end_inset

 is typically at least one order of magnitude smaller than 
\begin_inset Formula $\frac{1}{n}\sum_{j}\nabla_{a_{j}}l$
\end_inset

.
\end_layout

\begin_layout Standard
The 
\series bold
update for 
\begin_inset Formula $W$
\end_inset

 
\series default
is different in 2 ways.
 First, it is also scaled using the inverse covariance matrix of the input
 
\begin_inset Formula $C^{-1}$
\end_inset

.
 Secondly, it is centered since we substract the expectation of 
\begin_inset Formula $h$
\end_inset

.
 This gives a new theoretical understanding of an old well used trick 
\begin_inset CommandInset citation
LatexCommand cite
key "lecun1998gradient,schraudolph2012centering"

\end_inset

.
\end_layout

\begin_layout Section
Algorithms
\end_layout

\begin_layout Subsection
Centered gradient descent
\end_layout

\begin_layout Standard
Following the update for 
\begin_inset Formula $W$
\end_inset

 derived in 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:upd_w"

\end_inset

, we simply replace the usual update for the weight matrices by a centered
 version 
\begin_inset Formula $\Delta W=\frac{1}{n}\sum_{j}\nabla_{a_{j}}l\left(h_{j}-\frac{1}{n}\sum_{i}h_{i}\right)^{T}$
\end_inset

.
 The gradient, as well as the inner expectation, are computed using a minibatch.
 Some author refer to a very similar idea as 
\shape italic
mean-only batch normalization
\shape default
 
\begin_inset CommandInset citation
LatexCommand cite
key "salimans2016weight"

\end_inset

 but the difference here is that we do not reparametrize the forward propagation
, instead we just follow a slightly different direction which is not the
 gradient but a centered gradient.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{algorithmic}[1]
\end_layout

\begin_layout Plain Layout


\backslash
While{not converged}
\end_layout

\begin_layout Plain Layout


\backslash
State{Sample a minibatch $
\backslash
mathcal{D}$}
\end_layout

\begin_layout Plain Layout


\backslash
For{all layers}
\end_layout

\begin_layout Plain Layout


\backslash
State{$
\backslash
Delta_{a_i}
\backslash
leftarrow
\backslash
nabla_{a_i} l
\backslash
left(f
\backslash
left(x_i
\backslash
right), y_i
\backslash
right) 
\backslash
forall i 
\backslash
in 
\backslash
mathcal{D}$}
\end_layout

\begin_layout Plain Layout


\backslash
State{$b
\backslash
leftarrow b + 
\backslash
lambda 
\backslash
frac{1}{n} 
\backslash
sum_i 
\backslash
Delta_{a_i}$}
\end_layout

\begin_layout Plain Layout


\backslash
State{$W
\backslash
leftarrow W + 
\backslash
lambda 
\backslash
frac{1}{n} 
\backslash
sum_i 
\backslash
Delta_{a_i} 
\backslash
left(h_{i}-
\backslash
frac{1}{n}
\backslash
sum_{j}h_{j}
\backslash
right)^T $}
\end_layout

\begin_layout Plain Layout


\backslash
EndFor
\end_layout

\begin_layout Plain Layout


\backslash
EndWhile
\end_layout

\begin_layout Plain Layout


\backslash
end{algorithmic}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Centered gradient descent
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Amortized covariance preconditioner
\end_layout

\begin_layout Standard
In the updates derived from the covariance 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:upd_b"

\end_inset

 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:upd_w"

\end_inset

, we require an inverse of the matrix 
\begin_inset Formula $C=\frac{1}{n}\sum_{i}\left(h_{i}-\frac{1}{n}\sum_{j}h_{j}\right)\left(h_{i}-\frac{1}{n}\sum_{j}h_{j}\right)^{T}$
\end_inset

.
 This matrix has the size of the input of a layer 
\begin_inset Formula $n_{in}$
\end_inset

.
 While it is smaller than the full GN or FIM for a single layer of size
 
\begin_inset Formula $\left(n_{in}+1\right)\times n_{out}$
\end_inset

, it is still not very efficient to estimate the inverse at each iteration.
 Meanwhile, these statistics do not change much between iterations so a
 natural idea is to amortize the cost of inversion over several updates.
\end_layout

\begin_layout Standard
A question remains for the choice of 
\begin_inset Formula $\alpha$
\end_inset

.
 We adopt two approaches.
 The first one consists in treating it as a hyperparameter and tune it using
 our biased random search 
\begin_inset CommandInset ref
LatexCommand ref
reference "biased-random-search"

\end_inset

.
 The second one is a very experimental heuristics, which consists in taking
 the maximum value of the squarred gradient 
\begin_inset Formula $\alpha=\max_{i\in\text{minibatch},j\leq n_{out}}\left(\nabla_{a_{i}}l\right)_{j}^{2}$
\end_inset

.
 This gives a different value for each layer, and also different for each
 minibatch.
 We found it worked very well experimentally, and we justify it as being
 a measure of the curvature of the risk, with respect to the output of the
 layer.
\end_layout

\begin_layout Standard
For numerical stability and to account for the imprecision of 
\begin_inset Formula $C$
\end_inset

 between two estimates, we use Tikhonov regularization.
 In this case it is scaled by 
\begin_inset Formula $\frac{1}{\alpha}$
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
\frac{1}{n}\sum_{i}\left(\begin{array}{cc}
h_{i}h_{i}^{T} & h_{i}\\
h_{i}^{T} & 1
\end{array}\right)\otimes\alpha\mathbf{I}_{out}+\lambda\mathbf{I} & = & \frac{1}{n}\sum_{i}\left(\begin{array}{cc}
h_{i}h_{i}^{T}+\frac{\lambda}{\alpha}\mathbf{I} & h_{i}\\
h_{i}^{T} & 1+\frac{\lambda}{\alpha}
\end{array}\right)\otimes\alpha\mathbf{I}_{out}
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{algorithmic}[1]
\end_layout

\begin_layout Plain Layout


\backslash
Require{$
\backslash
mathbf{N}$  estimate statistics every $
\backslash
mathbf{N}$ minibatches}
\end_layout

\begin_layout Plain Layout


\backslash
State{$n_{updates} 
\backslash
leftarrow 0$}
\end_layout

\begin_layout Plain Layout


\backslash
While{not converged}
\end_layout

\begin_layout Plain Layout


\backslash
If{$n_{updates}
\backslash
mod
\backslash
mathbf{N}=0$}
\end_layout

\begin_layout Plain Layout


\backslash
State{Sample a minibatch $
\backslash
mathcal{D}$}
\end_layout

\begin_layout Plain Layout


\backslash
For{each layer $j$}
\end_layout

\begin_layout Plain Layout


\backslash
State{$C^{
\backslash
left(j
\backslash
right)} 
\backslash
leftarrow 
\backslash
text{cov} 
\backslash
left(h^{
\backslash
left(j
\backslash
right)}, h^{
\backslash
left(j
\backslash
right)} 
\backslash
right)$}
\end_layout

\begin_layout Plain Layout


\backslash
State{$inv
\backslash
_C^{
\backslash
left(j
\backslash
right)} 
\backslash
leftarrow 
\backslash
text{inverse} 
\backslash
left( C^{
\backslash
left(j
\backslash
right)} 
\backslash
right)$}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
EndFor
\end_layout

\begin_layout Plain Layout


\backslash
EndIf
\end_layout

\begin_layout Plain Layout


\backslash
State{Sample a minibatch $
\backslash
mathcal{D}$}
\end_layout

\begin_layout Plain Layout


\backslash
For{each layer $j$}
\end_layout

\begin_layout Plain Layout


\backslash
State{$
\backslash
Delta_{a_i^{
\backslash
left(j
\backslash
right)}}
\backslash
leftarrow
\backslash
nabla_{a_i^{
\backslash
left(j
\backslash
right)}} l
\backslash
left(f
\backslash
left(x_i
\backslash
right), y_i
\backslash
right) 
\backslash
forall i 
\backslash
in 
\backslash
mathcal{D}$}
\end_layout

\begin_layout Plain Layout


\backslash
State{$b
\backslash
leftarrow b + 
\backslash
lambda 
\backslash
frac{1}{n} 
\backslash
sum_i 
\backslash
Delta_{a_i^{
\backslash
left(j
\backslash
right)}}$}
\end_layout

\begin_layout Plain Layout


\backslash
State{$W
\backslash
leftarrow W + 
\backslash
lambda 
\backslash
frac{1}{n} 
\backslash
sum_i 
\backslash
Delta_{a_i^{
\backslash
left(j
\backslash
right)}} 
\backslash
left(h_{i}^{
\backslash
left(j
\backslash
right)}-
\backslash
frac{1}{n}
\backslash
sum_{k}h_{k}^{
\backslash
left(j
\backslash
right)}
\backslash
right)^T inv
\backslash
_C^{
\backslash
left(j
\backslash
right)}$}
\end_layout

\begin_layout Plain Layout


\backslash
EndFor
\end_layout

\begin_layout Plain Layout


\backslash
State{$n_{updates} 
\backslash
leftarrow n_{updates} + 1$}
\end_layout

\begin_layout Plain Layout


\backslash
EndWhile
\end_layout

\begin_layout Plain Layout


\backslash
end{algorithmic}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Amortized covariance preconditioner
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Other related approximate second order algorithms
\end_layout

\begin_layout Standard
The 2 following techniques have been proposed using the same factorization
 of the FIM that we wrote in 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:factored"

\end_inset

.
 In addition to their factorization we introduced the explicit separation
 of weight matrix and bias.
\end_layout

\begin_layout Subsection
KFAC
\end_layout

\begin_layout Standard
KFAC 
\begin_inset CommandInset citation
LatexCommand cite
key "martens2015optimizing"

\end_inset

 proposes to split the sum of Kronecker products into a product of sums:
\begin_inset Formula 
\begin{eqnarray*}
\mathbf{F} & \approx & \mathbb{E}\left[\left(\begin{array}{cc}
hh^{T} & h\\
h^{T} & 1
\end{array}\right)\right]\otimes\mathbb{E}\left[\left(\boldsymbol{J}_{\boldsymbol{y}}^{a}\right)^{T}D\left(\boldsymbol{y}\right)\boldsymbol{J}_{\boldsymbol{y}}^{a}\right]
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
The Kronecker product has the nice property that for 2 invertible square
 matrices 
\begin_inset Formula $A$
\end_inset

 and 
\begin_inset Formula $B$
\end_inset

, 
\begin_inset Formula $\left(A\otimes B\right)^{-1}=A^{-1}\otimes B^{-1}$
\end_inset

.
 It follows that inverting the FIM now requires inverting 2 smaller matrices.
 As for the approximation we made in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:focus-covariance"

\end_inset

, we lose the coupling between the forward and backward part of the FIM.
 In our experiments we found a comparable performance between KFAC and ACP.
\end_layout

\begin_layout Subsection
Natural Neural Networks
\end_layout

\begin_layout Standard
Natural neural networks 
\begin_inset CommandInset citation
LatexCommand cite
key "desjardins2015natural"

\end_inset

 exploit the same factorization by focusing on the input covariance part
 of each layer.
 .
 They propose a reparametrization that makes 
\begin_inset Formula $\mathbb{E}\left[hh^{T}\right]$
\end_inset

 equal the identity, and also they use the centering trick.
 To this view, they change the original linear transformation 
\begin_inset Formula $a=Wh+b$
\end_inset

 to become:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
a & = & VU\left(h-\mu\right)+d
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $V$
\end_inset

 is the new weight matrix and 
\begin_inset Formula $d$
\end_inset

 are the new biases.
 
\begin_inset Formula $\mu=\mathbb{E}\left[h\right]$
\end_inset

 is the mean value for 
\begin_inset Formula $h$
\end_inset

 and 
\begin_inset Formula $U$
\end_inset

 is the square root of the inverse covariance of 
\begin_inset Formula $h$
\end_inset

, defined by 
\begin_inset Formula $U^{2}=\left(\mathbb{E}\left[\left(h-\mu\right)\left(h-\mu\right)^{T}\right]\right)^{-1}$
\end_inset

, denoted by 
\begin_inset Formula $U=\left(\mathbb{E}\left[\left(h-\mu\right)\left(h-\mu\right)^{T}\right]\right)^{-\frac{1}{2}}$
\end_inset

.
 
\begin_inset Formula $U$
\end_inset

 and 
\begin_inset Formula $\mu$
\end_inset

 are not trained using gradient descent but instead they are estimated using
 data from the training set.
\end_layout

\begin_layout Standard
The new parameters 
\begin_inset Formula $V$
\end_inset

 and 
\begin_inset Formula $d$
\end_inset

 are trained using gradient descent, which will now have the desired property.
 We will denote by 
\begin_inset Formula $h_{e}=U\left(h-\mu\right)$
\end_inset

 the new 
\begin_inset Quotes eld
\end_inset

effective
\begin_inset Quotes erd
\end_inset

 input to the linear transformation induced by the weight matrix 
\begin_inset Formula $V$
\end_inset

.
 Let us first remark that 
\begin_inset Formula $\mathbb{E}\left[h_{e}\right]=U\left(\mathbb{E}\left[h\right]-\mu\right)=U\left(\mu-\mu\right)=0$
\end_inset

, so the reparametrized input is centered on average.
 A second remark is that 
\begin_inset Formula $\mathbb{E}\left[h_{e}h_{e}^{T}\right]=U\mathbb{E}\left[\left(h-\mu\right)\left(h-\mu\right)^{T}\right]U^{T}=\mathbf{I}$
\end_inset

.
 By construction 
\begin_inset Formula $U$
\end_inset

 cancels out the covariance.
 Wrapping everything together we thus have the desired property that:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
\mathbb{E}\left[\left(\begin{array}{cc}
h_{e}h_{e}^{T} & h_{e}\\
h_{e}^{T} & 1
\end{array}\right)\right] & = & \left(\begin{array}{cc}
\mathbb{E}\left[h_{e}h_{e}^{T}\right] & \mathbb{E}\left[h_{e}\right]\\
\mathbb{E}\left[h_{e}^{T}\right] & 1
\end{array}\right)\\
 & = & \left(\begin{array}{cc}
\mathbf{I} & 0\\
0 & 1
\end{array}\right)
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
The FIM for the reparametrization thus has a better form.
\end_layout

\begin_layout Section
Experiments
\end_layout

\begin_layout Standard
We compare our algorithms using the autoencoder benchmark presented in 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:autoencoder-benchmark"

\end_inset

.
 We ran all experiments on the same architecture using a Titan Black GPU.
\end_layout

\begin_layout Standard
For each experiment we plot the expected loss on the train set, and on a
 test set that we did not use for learning.
 To assess the practical performance, the x-axis represents the actual time
 spent on each experiment.
 We selected the best hyperparameters using biased random search, and we
 only plot the best experiment.
 For the test experiments, we also only plot the best result for each technique.
 We ran each experiment for 
\begin_inset Formula $3\times10^{5}$
\end_inset

 updates.
\end_layout

\begin_layout Standard
In the first experiment, we compare the performance of mean only batched
 norm and centered gradient descent to vanilla gradient descent.
 While our first experiments showed an improvement when centering the gradient
 for a small number of updates, this does not generalize to longer experiments
 as proved by this experiment.
 The best performing centered update is mean only batch norm, on both the
 training and test sets.
\end_layout

\begin_layout Standard
In the second experiment, we compare all second order approximations to
 a baseline using batch normalization.
 For all experiments we use an amortization factor of 100, that is we update
 the statistics and invert the corresponding matrices every 100 updates.
 We use a minibatch size of 200 for each update as well as for the statistics.
 We observe that KFAC, ACP and ACP with fixed alpha perform similarly with
 respect to time, and all outperform batch norm and SGD by a large margin.
 On the test set, we observe a small improvement for ACP over all techniques,
 in both the best (lower) value and the time spent to reach this value.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename figures/centering.pdf
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Centering experiments WIP
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename figures/2nd.pdf
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Second order experiments WIP
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Branch hidden
status open

\begin_layout Section
Direct gradient update
\end_layout

\begin_layout Standard
In this section, we present a new technique that makes use of updated gradient
 directions to account for interactions between layers.
\end_layout

\begin_layout Standard
A major inconvenient of first order methods is that they update every individual
 parameter without taking into account for other parameter updates.
 As an illustration, take a neural network composed of only 2 layers 
\begin_inset Formula $f\left(x\right)=f_{2}\left(W_{2}f_{1}\left(W_{1}x+b_{1}\right)+b_{2}\right)$
\end_inset

 and a loss function 
\begin_inset Formula $l\left(f\left(x\right),y\right)$
\end_inset

.
 Suppose that we have computed all gradients with respect to each parameters
 
\begin_inset Formula $\frac{\partial l}{\partial W_{1}}$
\end_inset

, 
\begin_inset Formula $\frac{\partial l}{\partial b_{1}}$
\end_inset

, 
\begin_inset Formula $\frac{\partial l}{\partial W_{2}}$
\end_inset

 and 
\begin_inset Formula $\frac{\partial l}{\partial b_{2}}$
\end_inset

.
 If we were using standard gradient descent, we would update the value of
 the parameters, all at once to obtain a better prediction function.
 Now suppose that we only update the parameters of layer 2, using the standard
 update rule 
\begin_inset Formula $W_{2}\leftarrow W_{2}-\lambda\frac{\partial l}{\partial W_{2}}$
\end_inset

 and 
\begin_inset Formula $b_{2}\leftarrow b_{2}-\lambda\frac{\partial l}{\partial b_{2}}$
\end_inset

.
 From this point, we have a different function 
\begin_inset Formula $f\left(x\right)$
\end_inset

.
 We could either update the parameters of layer 1 using the gradient already
 computed, or find the new values for the gradients for layer 1 using the
 updated 
\begin_inset Formula $f$
\end_inset

.
 We will do the latter, by using the property that the gradient for the
 parameters of layer 1 is a function of the parameters of layer 2, which
 can be written:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
\frac{\partial l}{\partial W_{1}}\left(W_{2},b_{2}\right) & \text{ and } & \frac{\partial l}{\partial b_{1}}\left(W_{2},b_{2}\right)
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
In particular, using a first order Taylor decomposition:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
\frac{\partial l}{\partial a_{1}}\left(W_{2}+\Delta W_{2},b_{2}+\Delta b_{2}\right) & = & \frac{\partial l}{\partial a_{1}}\left(W_{2},b_{2}\right)
\end{eqnarray*}

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Branch hidden
status open

\begin_layout Section
Links with well-used methods
\end_layout

\begin_layout Subsection
RMSProp
\begin_inset CommandInset label
LatexCommand label
name "subsec:RMSProp"

\end_inset


\end_layout

\begin_layout Standard
WIP: RMSProp is very close to diagonal GN for cross entropies.
\end_layout

\begin_layout Subsection
Batch normalization
\end_layout

\begin_layout Standard
Batch normalization 
\begin_inset CommandInset citation
LatexCommand cite
key "ioffe2015batch,ioffe2017batch"

\end_inset

 is a very popular way to make the learning procedure more stable in neural
 networks.
 It consists in a simple reparametrization that effectively normalize the
 activations using statistics (mean, variance) computed from a batch of
 examples, defined as follows:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
\text{BN}\left(x\right) & = & \frac{x-\mu}{\sqrt{\sigma^{2}+\epsilon}}
\end{eqnarray*}

\end_inset

with 
\begin_inset Formula $\mu=\mathbb{E}\left[x\right]$
\end_inset

 and 
\begin_inset Formula $\sigma^{2}=\mathbb{E}\left[\left(x-\mu\right)^{2}\right]$
\end_inset

 the empirical mean and variance computed over a minibatch in 
\begin_inset CommandInset citation
LatexCommand cite
key "ioffe2015batch"

\end_inset

 or using a running average in 
\begin_inset CommandInset citation
LatexCommand cite
key "ioffe2017batch"

\end_inset

.
 A 
\begin_inset Quotes eld
\end_inset

batch-normalized
\begin_inset Quotes erd
\end_inset

 layer is defined by:
\begin_inset Formula 
\[
h_{n}(x)=f_{n}\left(\gamma_{n}\odot\text{BN}\left(W_{n}h_{n-1}\right)+\beta_{n}\right)
\]

\end_inset


\end_layout

\begin_layout Standard
After reparametrization, we train the parameters 
\begin_inset Formula $W$
\end_inset

, 
\begin_inset Formula $\gamma$
\end_inset

 and 
\begin_inset Formula $\beta$
\end_inset

 using a gradient based method such as stochastic gradient descent.
 The new gradient 
\begin_inset Quotes eld
\end_inset

goes through
\begin_inset Quotes erd
\end_inset

 the BN operation (mean and square root of the variance) so both the forward
 pass and the backward pass are modified.
 We usually initialize the values of 
\begin_inset Formula $\gamma$
\end_inset

 to be a vector of 
\begin_inset Formula $1$
\end_inset

 and for 
\begin_inset Formula $\beta$
\end_inset

 a vector of 
\begin_inset Formula $0$
\end_inset

.
 
\end_layout

\begin_layout Standard
A first effect of this reparametrization, as pointed by the paper, is that
 it reduces the 
\shape italic
covariate shift
\shape default
 of each unit.
 If we consider a single unit, we can observe an empirical distribution
 of its activation over a dataset.
 We have seen in 
\begin_inset CommandInset ref
LatexCommand ref
reference "initialization-of-weights"

\end_inset

 that carefully tuning the initial weights and biases so that each unit
 has a desired distribution can improve drastically the efficiency or the
 learning procedure.
 This initial distribution changes throughout the learning, and this is
 what is called the 
\shape italic
covariate shift
\shape default
.
 Batch normalization forces the distribution of activations to have zero
 mean and unit variance.
\end_layout

\begin_layout Standard
For some experiments, 
\shape italic
mean-only 
\shape default
batch normalization can also be used to improve the learning procedure.
 We will cover this question in more details in 
\begin_inset CommandInset ref
LatexCommand ref
reference "centering-trick"

\end_inset

.
\end_layout

\begin_layout Standard
WIP
\end_layout

\end_inset


\end_layout

\begin_layout Chapter*
Conclusions
\end_layout

\begin_layout Standard
TODO
\end_layout

\begin_layout Standard
\begin_inset Branch hidden
status open

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "biblio"
options "plain"

\end_inset


\end_layout

\end_inset


\end_layout

\end_body
\end_document
